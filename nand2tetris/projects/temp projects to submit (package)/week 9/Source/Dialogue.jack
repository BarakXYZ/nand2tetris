//** Written & Designed by BarakXYZ (Barak Arosh Surian) in 2024
// As part of Week 9 assignment @NAND2TETRIS by Shimon Shocken & Noam Nisan *//

//** The Dialogue class is responsible for initializing and updating the different Dialogue Nodes, setting and switching between them depending on the currently active NPC and looping through the dialogue pages upon interaction (called from the NPC class) *//
class Dialogue {

    static DialogueNode currDialogueNode;
    static Array dialogueNodeArr;

    function void init() {
        do Dialogue.initDialogues();
        return;
    }

    function void initDialogues() {
        let dialogueNodeArr = Array.new(5);
        let dialogueNodeArr[0] = DialogueNode.makeIntro();
        let dialogueNodeArr[1] = DialogueNode.makeEnemyGNIRUT();
        let dialogueNodeArr[2] = DialogueNode.makeEnemyLOLO();
        let dialogueNodeArr[3] = DialogueNode.makeEnemyNAND();
        let dialogueNodeArr[4] = DialogueNode.makeEnemyTETRIS();
        let currDialogueNode = dialogueNodeArr[0];
        return;
    }

    function void makeNode(int quest) {
        do currDialogueNode.dispose();
        if (quest = 0) { let dialogueNodeArr[0] = DialogueNode.makeIntro(); }
        if (quest = 1) { let dialogueNodeArr[0] = DialogueNode.makeSHIMON1(); }
        if (quest = 2) { let dialogueNodeArr[0] = DialogueNode.makeSHIMON2(); }
        if (quest = 3) { let dialogueNodeArr[0] = DialogueNode.makeSHIMON3(); }
        if (quest = 4) { let dialogueNodeArr[0] = DialogueNode.makeSHIMON4(); }
        if (quest = 5) { let dialogueNodeArr[0] = DialogueNode.makeSHIMON5(); }
        if (quest = 6) { let dialogueNodeArr[0] = DialogueNode.makeSHIMON6(); }
        let currDialogueNode = dialogueNodeArr[0];
        return;
    }

    //** Update Enemy Node to Completed (Friend) *//
    function void updateToFriend(int quest) {
        var int selNPC;
        let selNPC = NPC.getActive();
        do currDialogueNode.dispose();
        if (selNPC=1) { let dialogueNodeArr[1] = DialogueNode.makeFriendGNIRUT(); }
        if (selNPC=2) { let dialogueNodeArr[2] = DialogueNode.makeFriendLOLO(); }
        if (selNPC=3) { let dialogueNodeArr[3] = DialogueNode.makeFriendNAND(); }
        if (selNPC=4) { let dialogueNodeArr[4] = DialogueNode.makeFriendTETRIS(); }
        let currDialogueNode = dialogueNodeArr[selNPC];
        return;
    }

    function void setDialogueNode(int aIndex) {
        let currDialogueNode = dialogueNodeArr[aIndex];
        return;
    }

    //** Main Dialogue loop, listens to 'Enter' and draws the different dialogue pages *//
    function void draw() {
        do UserInterface.clearDialogueBox();

        if (~(currDialogueNode.hasEnded())) {
            do UserInterface.drawInstruction(1);
            while (~(currDialogueNode.hasEnded())) {
                do currDialogueNode.draw();
                do Sys.wait(300);
                do Input.waitForEnter();
            }
            do UserInterface.clearInstruction();
            if (QuestManager.getActive() > 5) { do Sys.halt(); }  // End Program
        } else {
            do currDialogueNode.draw();
        }
        return;
    }

    function void endDialogue() {
        do currDialogueNode.end();
        return;
    }

}
