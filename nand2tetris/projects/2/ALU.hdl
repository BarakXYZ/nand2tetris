// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the outAdd16.tst output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    // Implemented by BarakXYZ 2024
    PARTS:
    Mux16(a=x, b=false, sel=zx, out=postZX); // Cac zx

    Not16(in=postZX, out=notPostZX);  // Cac nx
    Mux16(a=postZX, b=notPostZX, sel=nx, out=postNX);

    Mux16(a=y, b=false, sel=zy, out=postZY);  // Cac zy

    Not16(in=postZY, out=notPostZY);  // Cac ny
    Mux16(a=postZY, b=notPostZY, sel=ny, out=postNY);
    
    And16(a=postNX, b=postNY, out=andXY);  // f
    Add16(a=postNX, b=postNY, out=addXY);
    Mux16(a=andXY, b=addXY, sel=f, out=postF);
    
    Not16(in=postF, out=notPostF);  // no
    Mux16(a=postF, b=notPostF, sel=no, out=out, out[0..7]=finOutput1, out[8..15]=finOutput2 ,out[15]=ng);  /** ng*/
    
    Or8Way(in=finOutput1, out=checkZR1);  // zr
    Or8Way(in=finOutput2, out=checkZR2);
    Or(a=checkZR1, b=checkZR2, out=finZR);
    Not(in=finZR, out=zr);

}
/**
I finally realized I can actually output ('out') a few outputs from the same chip (haha :()
The zr & ng were definitely the most difficult to implement (especially the zr!)
Also, in this implementation I really got to know how powerful the Mux is and how to use it in more ways than I thought.

An alternative option for calculating the zr value:
    [finOutput (16bit)]
    Not16(in=finOutput, out=notFinOutput);
    Inc16(in=notFinalOutput, out=incNotFinOutput);
    Or16(a=incNotFinOutput, b=finOutput, out[0]=zr0, out[15]=zr15);
    Or(a=zr0, b=zr15, out=finZR);
    Not(in=finZR, out=zr);
*/
