class Input {
        static char c, lastKeyPressed;
        static String answer;
        static boolean exit;
        // var String space, enter, answerInstruction, answer;  // Probably UI
        static int countEnter, eventCounter1, eventCounter2;
        
        function void initInput() {
            let c = 0;
            let lastKeyPressed = 0;
            let exit = false;
            let countEnter = 0;
            let eventCounter1 = 0;
            let eventCounter2 = 0;

            let answer = String.new(10);
            // let answer = "_";

            return;
        }

        function void runInput() {
            while (~exit) {
                do Sys.wait(50);
                do Draw.drawSprite();
                do Output.moveCursor(3, 3);
                let c = Keyboard.keyPressed();

                if (c = 0) {
                    let lastKeyPressed = 0;
                    do Output.moveCursor(3, 3);
                }
                
                do Input.listenEnter();

                do Input.isAnswerMode();

                // do Output.printInt(c);
                let c = 0;

            }  // While ~Exit

            return;
        }  // runInput()


        function void lookupMode() {
            // max address == 24,576
            // do Output.moveCursor(21, 30);  // Start addr to type
            return;
        }


        //** if 'A' is pressed, enter '[A]nswer mode' */
        function void isAnswerMode() {

            if ((c = 65) & (~(lastKeyPressed = c))) {

                do UserInterface.eraseSelArrows(UserInterface.getSelCoordLookUp());
                do UserInterface.drawSelArrows(UserInterface.getSelCoordAnswer());
                do Sys.wait(200);
                let lastKeyPressed = c;

                // Exits if 'Escape' (140) is pressed
                while (~(c = 140)) {
                    do Draw.drawSprite();

                    do Input.manageCharAndTimeBuffer(c);
                    let c = Keyboard.keyPressed();

                    // if 'Enter': insert answer and exit 'Answer Mode'
                    if (Input.listenEnter()) { let c = 140; }

                    // Append or Erase char from answer
                    if ((~(c = 0)) & (~(c = 140))) {
                        do Input.debugKey();
                        do Input.debugEvent();
                        do Input.checkAnswerInput();
                    }
                }
                do UserInterface.eraseSelArrows(UserInterface.getSelCoordAnswer());
                do UserInterface.drawSelArrows(UserInterface.getSelCoordLookUp());
            }

            return;
        }
        
        // Track 'Enter' clicks
        function boolean listenEnter() {
            if ((c = 128) & (~(lastKeyPressed = c))) {
                let lastKeyPressed = c;
                let countEnter = countEnter + 1;
                do Output.moveCursor(22, 30);
                // do Output.printString(enter);  // Debug
                do Output.printInt(countEnter);
                do Output.moveCursor(3, 3);
                return true;
            }
            return false;
        }

        function void checkAnswerInput() {
            do Input.appendChar(9, 19, 7);
            do Input.eraseChar(19, 7);
            return;
        }

        //** Reduce Double-Tap & Friendly loop buffer */
        function void manageCharAndTimeBuffer(char c) {
            if (~(c = 0)) {
                do Sys.wait(150); 
            } else {
                do Sys.wait(50);
            }
            return;
        }

        //** Append Characater:
        // 1. if not exceeding max str length
        // 2. and not backspace (129) 
        // Prints the updated string to the given row & col coords */
        function void appendChar(int maxLen, int strCoordRow, int strCoordCol) {
            // Append character
            if ((answer.length() < maxLen) & (~(c = 129))) {
                do answer.appendChar(c);
                do Output.moveCursor(strCoordRow, strCoordCol);
                do Output.printString(answer);
            }
            return;
        }

        //** Erase Character:
        // 1. if greater than 0
        // 2. and input = backspace (129)
        // Prints the updated string to the given row & col coords */
        function void eraseChar(int strCoordRow, int strCoordCol) {
            if ((answer.length() > 0) & (c = 129)) {
                do Input.debugEvent2();
                
                // Clean old screen buffer (last char)
                do answer.appendChar(String.backSpace());
                do Output.moveCursor(strCoordRow, strCoordCol);
                do Output.printString(answer);

                do answer.eraseLastChar();  // erase backspace
                do answer.eraseLastChar();  // erase actual char
                
                // print updated string (not needed because visually we're good)
                // do Output.moveCursor(strCoordRow, strCoordCol);
                // do Output.printString(answer);
            }
            return;
        }

        function void debugKey() {
            do Output.moveCursor(14,3);
            do Output.printInt(c);
            return;
        }
       
        function void debugEvent() {
            let eventCounter1 = eventCounter1 + 1;
            do Output.moveCursor(15,3);
            do Output.printInt(eventCounter1);
            return;
        }

        function void debugEvent2() {
            let eventCounter2 = eventCounter2 + 1;
            do Output.moveCursor(16,3);
            do Output.printInt(eventCounter2);
            return;
        }


}
