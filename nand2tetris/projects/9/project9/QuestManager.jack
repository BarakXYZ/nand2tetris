class QuestManager {
    static int activeQuest;
    static boolean hasQuestStarted;
    static Array pendingNPCs;
    
    function void init() {
        let activeQuest = 0;
        let hasQuestStarted = false;

        do QuestManager.initPendingNPCs();

        do Dialogue.makeNode(activeQuest);
        
        return;
    }
    
    function void initPendingNPCs() {
        let pendingNPCs = Array.new(30);
        
        let pendingNPCs[0] = 0;  // Shimon
        let pendingNPCs[1] = 0;  // Shimon
        let pendingNPCs[2] = 0;  // Shimon
        let pendingNPCs[3] = 0;  // Shimon
        let pendingNPCs[4] = 0;  // Shimon

        return;
    }

    function boolean getHasStarted() {
        return hasQuestStarted;
    }

    function void setHasStarted(boolean cond) {
        let hasQuestStarted = cond;
        return;
    }

    function int getActive() {
        return activeQuest;
    }
    
    function void complete() {
        let activeQuest = activeQuest + 1;
        do UserInterface.clearChallengeAll();
        do Challenge.resetBuffer();
        do Dialogue.makeNode(activeQuest);
        do NPC.makeChallengeNode(activeQuest);
        do NPC.makeContentNode(activeQuest);
        do Game.setNewQuest(true);
        do QuestManager.manageQuest();
        do Challenge.manageBuffer(false);  // cause we're manipulating the index
        return;
    }

    function void manageQuest() {
        if (activeQuest = 0) {
            do QuestManager.complete();
            // do UserInterface.drawChallengeFrame();
            return;
        } 
        if (activeQuest = 2) {
            do UserInterface.drawContentFrame();
            return;
        }
        if (activeQuest = 3) {
            do UserInterface.drawLookupFrame();
            do Game.setIsLookupEnabled(true);
            return;
        }
        return;
    }

    function void setQuest(int level) {
        let activeQuest = level;
        return;
    }
}
