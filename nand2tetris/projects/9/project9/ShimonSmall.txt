//** Written & Designed by BarakXYZ (Barak Arosh Surian) in 2024 
// As part of Week 9 assignment @NAND2TETRIS by Shimon Shocken & Noam Nissan *//

//** Deprecated *//

// V1 (Middle)
function void drawShimonSmall(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, -2048);
	do Memory.poke(memAddress +32, 1536);
	do Memory.poke(memAddress +64, 1280);
	do Memory.poke(memAddress +96, 640);
	do Memory.poke(memAddress +128, 320);
	do Memory.poke(memAddress +160, 320);
	do Memory.poke(memAddress +192, 192);
	do Memory.poke(memAddress +224, 64);
	do Memory.poke(memAddress +256, 64);
	do Memory.poke(memAddress +288, 64);
	do Memory.poke(memAddress +320, 14400);
	do Memory.poke(memAddress +352, 32352);
	do Memory.poke(memAddress +384, -19824);
	do Memory.poke(memAddress +416, -32504);
	do Memory.poke(memAddress +448, -32440);
	do Memory.poke(memAddress +480, -432);
	do Memory.poke(memAddress +512, -32752);
	do Memory.poke(memAddress +544, 16416);
	do Memory.poke(memAddress +576, 16448);
	do Memory.poke(memAddress +608, 8256);
	do Memory.poke(memAddress +640, -11904);
	do Memory.poke(memAddress +672, -24320);
	do Memory.poke(memAddress +704, 16896);
	do Memory.poke(memAddress +736, -31744);
	do Memory.poke(memAddress +768, 3584);
	do Memory.poke(memAddress +800, 5888);
	do Memory.poke(memAddress +832, 14208);
	do Memory.poke(memAddress +864, 18400);
	do Memory.poke(memAddress +896, -30736);
	do Memory.poke(memAddress +928, 2040);
	do Memory.poke(memAddress +960, 8188);
	do Memory.poke(memAddress +992, -1);
	// column 1
	do Memory.poke(memAddress +1, 63);
	do Memory.poke(memAddress +33, 192);
	do Memory.poke(memAddress +65, 320);
	do Memory.poke(memAddress +97, 640);
	do Memory.poke(memAddress +129, 1280);
	do Memory.poke(memAddress +161, 2560);
	do Memory.poke(memAddress +193, 2560);
	do Memory.poke(memAddress +225, 3072);
	do Memory.poke(memAddress +257, 3072);
	do Memory.poke(memAddress +289, 13312);
	do Memory.poke(memAddress +321, 18544);
	do Memory.poke(memAddress +353, 19964);
	do Memory.poke(memAddress +385, 16951);
	do Memory.poke(memAddress +417, 18948);
	do Memory.poke(memAddress +449, 10500);
	do Memory.poke(memAddress +481, 8444);
	do Memory.poke(memAddress +513, 8200);
	do Memory.poke(memAddress +545, 4112);
	do Memory.poke(memAddress +577, 2085);
	do Memory.poke(memAddress +609, 2112);
	do Memory.poke(memAddress +641, 2239);
	do Memory.poke(memAddress +673, 1104);
	do Memory.poke(memAddress +705, 3119);
	do Memory.poke(memAddress +737, 7704);
	do Memory.poke(memAddress +769, 32007);
	do Memory.poke(memAddress +801, -768);
	do Memory.poke(memAddress +833, -896);
	do Memory.poke(memAddress +865, -416);
	do Memory.poke(memAddress +897, -481);
	do Memory.poke(memAddress +929, -256);
	do Memory.poke(memAddress +961, -128);
	do Memory.poke(memAddress +993, -1);
	// column 2
	do Memory.poke(memAddress +834, 3);
	do Memory.poke(memAddress +866, 7);
	do Memory.poke(memAddress +898, 15);
	do Memory.poke(memAddress +930, 31);
	do Memory.poke(memAddress +962, 63);
	do Memory.poke(memAddress +994, 63);
	return;
}



// V2 (Right Appended)
function void drawShimonSmall(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, ~32767);
	do Memory.poke(memAddress +32, 24576);
	do Memory.poke(memAddress +64, 20480);
	do Memory.poke(memAddress +96, 10240);
	do Memory.poke(memAddress +128, 5120);
	do Memory.poke(memAddress +160, 5120);
	do Memory.poke(memAddress +192, 3072);
	do Memory.poke(memAddress +224, 1024);
	do Memory.poke(memAddress +256, 1024);
	do Memory.poke(memAddress +288, 1024);
	do Memory.poke(memAddress +320, -31744);
	do Memory.poke(memAddress +352, -6656);
	do Memory.poke(memAddress +384, 10496);
	do Memory.poke(memAddress +416, 4224);
	do Memory.poke(memAddress +448, 5248);
	do Memory.poke(memAddress +480, -6912);
	do Memory.poke(memAddress +512, 256);
	do Memory.poke(memAddress +544, 512);
	do Memory.poke(memAddress +576, 1024);
	do Memory.poke(memAddress +608, 1024);
	do Memory.poke(memAddress +640, 6144);
	do Memory.poke(memAddress +672, 4096);
	do Memory.poke(memAddress +704, 8192);
	do Memory.poke(memAddress +736, 16384);
	do Memory.poke(memAddress +768, -8192);
	do Memory.poke(memAddress +800, 28672);
	do Memory.poke(memAddress +832, 30720);
	do Memory.poke(memAddress +864, 32256);
	do Memory.poke(memAddress +896, 32512);
	do Memory.poke(memAddress +928, 32640);
	do Memory.poke(memAddress +960, -64);
	do Memory.poke(memAddress +992, -16);
	// column 1
	do Memory.poke(memAddress +1, 1023);
	do Memory.poke(memAddress +33, 3072);
	do Memory.poke(memAddress +65, 5120);
	do Memory.poke(memAddress +97, 10240);
	do Memory.poke(memAddress +129, 20480);
	do Memory.poke(memAddress +161, -24576);
	do Memory.poke(memAddress +193, -24576);
	do Memory.poke(memAddress +225, -16384);
	do Memory.poke(memAddress +257, -16384);
	do Memory.poke(memAddress +289, 16384);
	do Memory.poke(memAddress +321, -30973);
	do Memory.poke(memAddress +353, -8249);
	do Memory.poke(memAddress +385, 9083);
	do Memory.poke(memAddress +417, -24504);
	do Memory.poke(memAddress +449, -28600);
	do Memory.poke(memAddress +481, 4047);
	do Memory.poke(memAddress +513, 136);
	do Memory.poke(memAddress +545, 260);
	do Memory.poke(memAddress +577, -32172);
	do Memory.poke(memAddress +609, -31742);
	do Memory.poke(memAddress +641, -29699);
	do Memory.poke(memAddress +673, 17674);
	do Memory.poke(memAddress +705, -15628);
	do Memory.poke(memAddress +737, -7800);
	do Memory.poke(memAddress +769, -12176);
	do Memory.poke(memAddress +801, -12287);
	do Memory.poke(memAddress +833, -14333);
	do Memory.poke(memAddress +865, -6652);
	do Memory.poke(memAddress +897, -7688);
	do Memory.poke(memAddress +929, -4096);
	do Memory.poke(memAddress +961, -2047);
	do Memory.poke(memAddress +993, -1);
	// column 2
	do Memory.poke(memAddress +290, 3);
	do Memory.poke(memAddress +322, 4);
	do Memory.poke(memAddress +354, 4);
	do Memory.poke(memAddress +386, 4);
	do Memory.poke(memAddress +418, 4);
	do Memory.poke(memAddress +450, 2);
	do Memory.poke(memAddress +482, 2);
	do Memory.poke(memAddress +514, 2);
	do Memory.poke(memAddress +546, 1);
	do Memory.poke(memAddress +738, 1);
	do Memory.poke(memAddress +770, 7);
	do Memory.poke(memAddress +802, 15);
	do Memory.poke(memAddress +834, 63);
	do Memory.poke(memAddress +866, 127);
	do Memory.poke(memAddress +898, 255);
	do Memory.poke(memAddress +930, 511);
	do Memory.poke(memAddress +962, 1023);
	do Memory.poke(memAddress +994, 2047);
	return;
}


// V3 (left appended)
function void drawShimonSmall(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, -64);
	do Memory.poke(memAddress +32, 48);
	do Memory.poke(memAddress +64, 40);
	do Memory.poke(memAddress +96, 20);
	do Memory.poke(memAddress +128, 10);
	do Memory.poke(memAddress +160, 10);
	do Memory.poke(memAddress +192, 6);
	do Memory.poke(memAddress +224, 2);
	do Memory.poke(memAddress +256, 2);
	do Memory.poke(memAddress +288, 2);
	do Memory.poke(memAddress +320, -32318);
	do Memory.poke(memAddress +352, -7181);
	do Memory.poke(memAddress +384, -17004);
	do Memory.poke(memAddress +416, 9224);
	do Memory.poke(memAddress +448, 9226);
	do Memory.poke(memAddress +480, -6158);
	do Memory.poke(memAddress +512, 17408);
	do Memory.poke(memAddress +544, -32255);
	do Memory.poke(memAddress +576, 10754);
	do Memory.poke(memAddress +608, 258);
	do Memory.poke(memAddress +640, -372);
	do Memory.poke(memAddress +672, -31480);
	do Memory.poke(memAddress +704, 31248);
	do Memory.poke(memAddress +736, -15328);
	do Memory.poke(memAddress +768, 14448);
	do Memory.poke(memAddress +800, 184);
	do Memory.poke(memAddress +832, 444);
	do Memory.poke(memAddress +864, 575);
	do Memory.poke(memAddress +896, -961);
	do Memory.poke(memAddress +928, 63);
	do Memory.poke(memAddress +960, 255);
	do Memory.poke(memAddress +992, -1);
	// column 1
	do Memory.poke(memAddress +1, 1);
	do Memory.poke(memAddress +33, 6);
	do Memory.poke(memAddress +65, 10);
	do Memory.poke(memAddress +97, 20);
	do Memory.poke(memAddress +129, 40);
	do Memory.poke(memAddress +161, 80);
	do Memory.poke(memAddress +193, 80);
	do Memory.poke(memAddress +225, 96);
	do Memory.poke(memAddress +257, 96);
	do Memory.poke(memAddress +289, 416);
	do Memory.poke(memAddress +321, 579);
	do Memory.poke(memAddress +353, 623);
	do Memory.poke(memAddress +385, 529);
	do Memory.poke(memAddress +417, 592);
	do Memory.poke(memAddress +449, 328);
	do Memory.poke(memAddress +481, 263);
	do Memory.poke(memAddress +513, 256);
	do Memory.poke(memAddress +545, 128);
	do Memory.poke(memAddress +577, 65);
	do Memory.poke(memAddress +609, 66);
	do Memory.poke(memAddress +641, 69);
	do Memory.poke(memAddress +673, 34);
	do Memory.poke(memAddress +705, 97);
	do Memory.poke(memAddress +737, 240);
	do Memory.poke(memAddress +769, 1000);
	do Memory.poke(memAddress +801, 2024);
	do Memory.poke(memAddress +833, 8164);
	do Memory.poke(memAddress +865, 16371);
	do Memory.poke(memAddress +897, 32752);
	do Memory.poke(memAddress +929, -8);
	do Memory.poke(memAddress +961, -4);
	do Memory.poke(memAddress +993, -1);
	// column 2
	do Memory.poke(memAddress +930, 0);
	do Memory.poke(memAddress +962, 1);
	do Memory.poke(memAddress +994, 3);
	// column -1
	do Memory.poke(memAddress +383, ~32767);
	do Memory.poke(memAddress +415, 16384);
	do Memory.poke(memAddress +447, 16384);
	do Memory.poke(memAddress +479, ~32767);
	do Memory.poke(memAddress +511, ~32767);
	do Memory.poke(memAddress +895, ~32767);
	do Memory.poke(memAddress +927, -16384);
	do Memory.poke(memAddress +959, -8192);
	do Memory.poke(memAddress +991, -2048);
	return;
}
