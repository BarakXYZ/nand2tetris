class Challenge {

        static int maxLen, row, col;
        static String selBuff, tempBuff;
        static Array buffArr, trackBuffArr;
        static int selBuffIndex;
        static Array answers;
        static boolean isArrow, isDownArrow, isUpArrow, isEnter;
        static ChallengeBuffer cBuff0;

        function void init() {
            let cBuff0 = ChallengeBuffer.new();
            let row = 5;
            let col = 11;
            let selBuff = cBuff0.getBufferAt(13);  // default buffer
            let tempBuff = cBuff0.getBufferAt(13);  // default buffer
            let maxLen = cBuff0.getMaxStrLen() - 1;

            let selBuffIndex = 13;

            let isArrow = false;
            let isEnter = false;

            do Challenge.initAnswers();
            return;
        }

        function void initAnswers() {
            let answers = Array.new(30);
            
            let answers[0] = "6";
            let answers[1] = "555";
            let answers[2] = "99999";

            return;
        }

        
        //** if 'A' is pressed, enter '[A]nswer mode' */
        function void run(char c) {
            do UserInterface.drawInstruction(0);
            do UserInterface.drawSelArrows(UserInterface.getSelCoordAnswer());
            do Sys.wait(200);

            // Exits if 'Escape' (140) is pressed
            while (~(c = 140)) {
                do Draw.sprite();
                do Challenge.resetParams();

                do Input.manageCharAndTimeBuffer(c);
                let c = Keyboard.keyPressed();

                // if 'Enter': insert answer and exit 'Answer Mode'
                if (Input.isEnter(c)) {
                    // do Challenge.checkAnswer();  // To be implemented

                    let isEnter = true;
                }

                if (c = 131) { do Challenge.upArrow(); }
                if (c = 133) { do Challenge.downArrow(); }

                // Append / Erase char if non-zero & no Enter & no Escape & no Arrow
                if ((~(c = 0)) & (~(isEnter)) & (~(isArrow)) & (~(c = 140))) {
                    do Debug.key(c);
                    do Debug.event();
                    
                    // is erase? (129 == backspace)
                    if ((selBuff.length() > 0) & (c = 129)) { do Challenge.eraseChar(); }
                    else {  // is append
                        if ((selBuff.length() < maxLen) & (~(c = 129))) {
                            do Challenge.appendChar(c); 
                        }
                    }
                }

            }
            do UserInterface.eraseSelArrows(UserInterface.getSelCoordAnswer());
            do UserInterface.clearInstruction();
            return;
        }

        function void resetParams() {
            let isArrow = false;
            let isEnter = false;
            let isUpArrow = false;
            let isDownArrow = false;

            return;
        }


        function boolean check() {
            if (selBuff = answers[QuestManager.getActive()]) {
                do QuestManager.increment();
                return true;
            }
            else {
                return false;
            }
        }

        //** Append Characater:
        // Prints the updated string to the given row & col coords */
        function void appendChar(char c) {
            do selBuff.appendChar(c);  // built-in String method
            do Output.moveCursor(row + selBuffIndex, col);
            do Output.printString(selBuff);
            return;
        }

        //** Erase Character:
        // Prints the updated string to the given row & col coords */
        function void eraseChar() {
            // Clean old screen buffer (last char)
            do selBuff.appendChar(String.backSpace());
            do Output.moveCursor(row + selBuffIndex, col);
            do Output.printString(selBuff);

            do selBuff.eraseLastChar();  // erase backspace
            do selBuff.eraseLastChar();  // erase actual char
            return;
        }

        function void upArrow() {
            let isArrow = true;
            let isUpArrow = true;
            do UserInterface.drawBufferSel(selBuffIndex, false);
            if (selBuffIndex = 0) { let selBuffIndex = 14; }
            else { 
                if (selBuffIndex = 13) { let selBuffIndex = 11; }
                else { let selBuffIndex = selBuffIndex - 1; } 
            }
            do Challenge.handleBuffer();
            do UserInterface.drawBufferSel(selBuffIndex, true);
            return;
        }

        function void downArrow() {
            let isArrow = true;
            let isDownArrow = true;
            do UserInterface.drawBufferSel(selBuffIndex, false);
            if (selBuffIndex = 14) { let selBuffIndex = 0; }
            else { 
                if (selBuffIndex = 11) { let selBuffIndex = 13; }
                else { let selBuffIndex = selBuffIndex + 1; } 
            }
            do Challenge.handleBuffer();
            do UserInterface.drawBufferSel(selBuffIndex, true);
            return;
        }

        function void handleBuffer() {
            let selBuff = cBuff0.getBufferAt(selBuffIndex);
            return;
        }

}
