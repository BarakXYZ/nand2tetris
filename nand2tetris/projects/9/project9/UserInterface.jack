class UserInterface {
    static int maxTitleLen, titleStartColumnIndex, titleStartRowIndex;

    constructor UserInterface new() {  // Currently not used
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    
    function void gridX(int j) {
        var int i;
        let i = 0;

        do Output.moveCursor(0,0);  // Reset
        while(i < j) {
            do Output.moveCursor(i, 0);
            do Output.printInt(i);
            let i = i + 1;
        }
        return;
    }
    function void debugTensIndex(int index) {
            do Output.moveCursor(1, index - 1);
            do Output.printInt(index);
            do Output.moveCursor(0, index);
        return;
    }

    function void gridY(int j) {
        var int i, n;
        let i = 0;
        let n = 0;

        do Output.moveCursor(0,0);  // Reset
        while (i < j) {
            if (i = 10) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 20) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 30) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 40) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 50) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 60) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }


            do Output.printInt(n);
            let i = i + 1;
            let n = n + 1;
        }
        return;
    }

    function void drawUnfilledRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x2, y1);  // Upper line
        do Screen.drawLine(x1, y2, x2, y2);  // Bottom line
        do Screen.drawLine(x1, y1, x1, y2);  // Left line
        do Screen.drawLine(x2, y1, x2, y2);  // Right line
        return;
    }

    function void drawMainFrame() {

        // Draw outer rectangle
        do UserInterface.drawUnfilledRectangle(1, 1, 511, 255);

        // Draw inner rectangle (approximately 10% smaller)
        do UserInterface.drawUnfilledRectangle(52, 26, 460, 229);

        // Draw title area (tighter and aligned)
        do UserInterface.drawUnfilledRectangle(52, 26, 460, 46);

        // Inner rec2
        do UserInterface.drawUnfilledRectangle(134, 26, 378, 229);

        //** fixed menu titles: Challenge & Content */
        do UserInterface.printSubMenuTitles();

        return;
    }

    function void printSubMenuTitles() {
        do Output.moveCursor(3, 7);
        do Output.printString("Challenge");

        do Output.moveCursor(3, 49);
        do Output.printString("Content");

        return;
    }
    function void printAlignedTitle(String title) {
        var int delta;
        let delta = maxTitleLen - title.length();
        do Output.moveCursor(
            titleStartRowIndex, titleStartColumnIndex + (delta / 2));
        do Output.printString(title);
        return;
    }

    function void printRAMContent(String content) {
        
        return;
    }

    function void printRAM(RAM ram) {
        var int delta;

        let delta = maxTitleLen - ram.getNameLength();
        do Output.moveCursor(
            titleStartRowIndex, titleStartColumnIndex + (delta / 2));
        do Output.printString(ram.getName());

        //** Content */
        // addr
        do Output.moveCursor(6, 48);
        do Output.printString("Addr=");
        do Output.printInt(ram.getAddr());

        // inM
        do Output.moveCursor(8, 49);
        do Output.printString("inM=");
        do Output.printInt(ram.getM());

        return;
    }


    function void setUIParams() {
        let maxTitleLen = 32;
        let titleStartRowIndex = 3;
        let titleStartColumnIndex = 16;
        return;
    }

}
