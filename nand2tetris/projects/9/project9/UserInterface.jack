class UserInterface {
    static int maxTitleLen, titleStartColumnIndex, titleStartRowIndex;
    static String answerInstruction, exitInstruction, notExitInstruction;
    static char selRightArrow, selLeftArrow, selUpArrow, blankSpace, asterisk, atSign;
    static String currentSelFriend, callingFriend, unknownFriend, clearBarFriend; 
    static Array selCoordAnswer, selCoordLookUp;
    static String blankPromptLine;

    function void init() {
        let maxTitleLen = 30;
        let titleStartRowIndex = 3;
        let titleStartColumnIndex = 16;
        let answerInstruction = "[A]nswer";
        let selRightArrow = 62;
        let selLeftArrow = 60;
        let selUpArrow = 94;
        let blankSpace = 32;
        let asterisk = 42;
        let atSign = 64;
        let currentSelFriend = ">> @ <<";
        let unknownFriend = "** ? **";
        let callingFriend = "** ! **";
        let clearBarFriend = "       ";
        let blankPromptLine = "                            ";

        let exitInstruction = "Press 'Escape' to Exit Current Mode";
        let notExitInstruction = "                                    ";

        do UserInterface.initAnswerSelCoords();
        do UserInterface.initLookUpSelCoords();
        do UserInterface.drawMainFrame();

        // Debug Screen Rows & Columns
        do UserInterface.gridX(23);
        do UserInterface.gridY(64);
        return;
    }

    constructor UserInterface new() {  // Currently not used
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    
    function void gridX(int j) {
        var int i;
        let i = 0;

        do Output.moveCursor(0,0);  // Reset
        while(i < j) {
            do Output.moveCursor(i, 0);
            do Output.printInt(i);
            let i = i + 1;
        }
        return;
    }
    function void debugTensIndex(int index) {
            do Output.moveCursor(1, index - 1);
            do Output.printInt(index);
            do Output.moveCursor(0, index);
        return;
    }

    function void gridY(int j) {
        var int i, n;
        let i = 0;
        let n = 0;

        do Output.moveCursor(0,0);  // Reset
        while (i < j) {
            if (i = 10) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 20) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 30) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 40) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 50) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }
            if (i = 60) {
                let n = 0;
                do UserInterface.debugTensIndex(i);
            }


            do Output.printInt(n);
            let i = i + 1;
            let n = n + 1;
        }
        return;
    }

    function void drawUnfilledRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x2, y1);  // Upper line
        do Screen.drawLine(x1, y2, x2, y2);  // Bottom line
        do Screen.drawLine(x1, y1, x1, y2);  // Left line
        do Screen.drawLine(x2, y1, x2, y2);  // Right line
        return;
    }

    function void drawMainFrame() {


        // Draw outer rectangle
        do UserInterface.drawUnfilledRectangle(1, 1, 511, 255);

        // Draw inner rectangle (approximately 10% smaller)
        do UserInterface.drawUnfilledRectangle(1, 20, 440, 229);
        // 52, 440

        // Draw Challenge Frame
        do UserInterface.drawUnfilledRectangle(52, 20, 511, 255);
        // Draw Content Frame
        do UserInterface.drawUnfilledRectangle(52, 20, 440, 229);

        // Draw title area (tighter and aligned)
        do UserInterface.drawUnfilledRectangle(52, 20, 440, 45);

        // Viewport Frame
        // do UserInterface.drawUnfilledRectangle(134, 20, 354, 179);
        do UserInterface.drawUnfilledRectangle(134, 20, 354, 174);
        
        do UserInterface.drawFriendsFrames();

        // Text Box Frame
        do UserInterface.drawUnfilledRectangle(134, 174, 440, 229);

        //** fixed menu titles: Challenge & Content */
        do UserInterface.printSubMenuTitles();

        do UserInterface.drawAnswerUI();

        do UserInterface.drawAddrLookupUI();
        
        return;
    }

    function void drawFriendsFrames() {

        do UserInterface.drawUnfilledRectangle(440, 20, 511, 77);
        do UserInterface.drawUnfilledRectangle(440, 77, 511, 139);  // Comp a bit
        do UserInterface.drawUnfilledRectangle(440, 139, 511, 197);
        do UserInterface.drawUnfilledRectangle(440, 197, 511, 255);


        do Sprites.drawQuestionMark1();
        do Sprites.drawQuestionMark2();
        do Sprites.drawQuestionMark3();


        do Sprites.drawSpriteShimonSmall();
        do Output.moveCursor(18, 56);
        do Output.printString(currentSelFriend);
        do Output.moveCursor(19, 56);
        do Output.printString("@SHIMON");


        do Output.moveCursor(13, 56);
        do Output.printString(callingFriend);
        do Output.moveCursor(14, 57);
        do Output.printString("@GINI");
        // do Sprites.drawSpriteGiniSmall();

        do Output.moveCursor(7, 56);
        do Output.printString(unknownFriend);
        do Output.moveCursor(8, 57);
        do Output.printString("@TEST");

        do Output.moveCursor(2, 56);
        do Output.printString(callingFriend);
        do Output.moveCursor(3, 57);
        do Output.printString("@BOBO");


        return;
    }

    function void drawAddrLookupUI() {
        
        // Frame
        do Screen.drawLine(226, 229, 290, 229);  // Upper line
        do Screen.drawLine(226, 229, 226, 243);  // Left line
        do Screen.drawLine(290, 229, 290, 243);  // Right line
        do Screen.drawLine(226, 243, 258, 255);  // Left Diagonal
        do Screen.drawLine(290, 243, 258, 255);  // Right Diagonal
        
        do Output.moveCursor(21, 39);
        // do Output.printString("[@]Lookup Address");
        do Output.printString("[L]ookup Address");
        do Output.moveCursor(21, 29);
        do Output.printChar(atSign);
        return;
    }

    function void isExitInstruction(boolean b) {
        if (b) {
            do Output.moveCursor(0,0);
            do Output.printString(exitInstruction);
        }
        else {
            do Output.moveCursor(0,0);
            do Output.printString(notExitInstruction);
        }
        return;
    }

    function void printSubMenuTitles() {
        do Output.moveCursor(3, 7);
        do Output.printString("Challenge");

        do Output.moveCursor(3, 46);
        do Output.printString("Content");

        return;
    }
    function void printAlignedTitle(String title) {
        var int delta;
        let delta = maxTitleLen - title.length();
        do Output.moveCursor(
            titleStartRowIndex, titleStartColumnIndex + (delta / 2));
        do Output.printString(title);
        return;
    }


    function void drawAnswerUI() {
        do Output.moveCursor(21, 8);
        do Output.printString(answerInstruction);
        return;
    }

    function void drawSelArrows(Array selCoordDraw) {

        do Output.moveCursor(selCoordDraw[0], selCoordDraw[1]);
        do Output.printChar(selRightArrow);

        do Output.moveCursor(selCoordDraw[2], selCoordDraw[3]);
        do Output.printChar(selLeftArrow);

        do Output.moveCursor(selCoordDraw[4], selCoordDraw[5]);
        do Output.printChar(asterisk);

        return;
    }

    function void eraseSelArrows(Array selCoordErase) {

        do Output.moveCursor(selCoordErase[0], selCoordErase[1]);
        do Output.printChar(blankSpace);

        do Output.moveCursor(selCoordErase[2], selCoordErase[3]);
        do Output.printChar(blankSpace);

        do Output.moveCursor(selCoordErase[4], selCoordErase[5]);
        do Output.printChar(blankSpace);

        return;
    }

    function void initLookUpSelCoords() {
        let selCoordLookUp = Array.new(6);
        let selCoordLookUp[0] = 21;
        let selCoordLookUp[1] = 27;
        let selCoordLookUp[2] = 21;
        let selCoordLookUp[3] = 37;
        let selCoordLookUp[4] = 22;
        let selCoordLookUp[5] = 32;

        return;
    }

    function void initAnswerSelCoords() {
        let selCoordAnswer = Array.new(6);
        let selCoordAnswer[0] = 19;
        let selCoordAnswer[1] = 5;
        let selCoordAnswer[2] = 19;
        let selCoordAnswer[3] = 17;
        let selCoordAnswer[4] = 22;
        let selCoordAnswer[5] = 11;

        return;
    }

    function Array getSelCoordAnswer() {
        return selCoordAnswer;
    }

    function Array getSelCoordLookUp() {
        return selCoordLookUp;
    }

    function void clearPromptLines() {
        do Output.moveCursor(0,0);
        do Output.printString(blankPromptLine);
        do Output.moveCursor(1,0);
        do Output.printString(blankPromptLine);

        return;
    }
}
