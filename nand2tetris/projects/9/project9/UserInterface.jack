class UserInterface {
    static int maxTitleLen, titleStartColumnIndex, titleStartRowIndex;
    static String challengeInstruction, escapeInstruction, clearInstruction;
    static String enterInstruction;
    static char selRightArrow, selLeftArrow, selUpArrow, blankSpace, asterisk, atSign;
    static String currentSelFriend, callingFriend, unknownFriend, clearBarFriend; 
    static String challengeTitle, tempTitle, contentTitle;
    static Array selCoordAnswer, selCoordLookUp;
    static String blankPromptLine, incorrectSignal;

    function void init() {
        var int i;
        let i = 0;

        let challengeTitle = "Challenge";
        let tempTitle = "temp";
        let contentTitle = "Content";
        let maxTitleLen = 30;
        let titleStartRowIndex = 3;
        let titleStartColumnIndex = 16;
        // let challengeInstruction = "[A]nswer Mode";
        let challengeInstruction = "[C]hallenge Mode";
        let selRightArrow = 62;
        let selLeftArrow = 60;
        let selUpArrow = 94;
        let blankSpace = 32;
        let asterisk = 42;
        let atSign = 64;
        let currentSelFriend = ">> @ <<";
        let unknownFriend = "** ? **";
        let callingFriend = "** ! **";
        let clearBarFriend = "       ";
        let blankPromptLine = "                                    ";
        let incorrectSignal = "XXX Incorrect, try again XXX";

        let escapeInstruction = " ** Press 'Escape' to Exit Current Mode **";
        let enterInstruction = " ** Press 'Enter' to continue **";
        let clearInstruction = "                                            ";

        do UserInterface.initAnswerSelCoords();
        do UserInterface.initLookUpSelCoords();
        do UserInterface.draw();

        do UserInterface.printAlignedTitle("SHIMON");

        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    
    function void draw() {

        // do UserInterface.drawEntireScreenBorders();

        do UserInterface.drawMainFrame();

        do UserInterface.drawViewport();

        do UserInterface.drawTextBox();

        // do UserInterface.drawChallengeFrame();

        // do UserInterface.drawContentFrame();

        // do UserInterface.drawLookup();

        // do UserInterface.drawFriendsFrames();
        
        return;
    }

    function void drawEntireScreenBorders() {
        do UserInterface.drawUnfilledRectangle(0, 0, 511, 255);
        return;
    }

    function void drawMainFrame() {
        do UserInterface.drawUnfilledRectangle(0, 20, 440, 229);
        return;
    }

    function void drawViewport() {
        do UserInterface.drawUnfilledRectangle(136, 20, 354, 45);  // title
        do UserInterface.drawUnfilledRectangle(136, 45, 354, 174);  // viewport
        return;
    }

    function void drawTextBox() {
        do UserInterface.drawUnfilledRectangle(136, 174, 440, 229);
        return;
    }

    function void drawChallengeFrame() {
        do UserInterface.drawUnfilledRectangle(0, 20, 136, 45);  // title
        do Output.moveCursor(3, 1);
        do Output.printString(challengeTitle);
        do Output.moveCursor(3, 12);
        do Output.printString(tempTitle);
        do Output.moveCursor(21, 0);
        do Output.printString(challengeInstruction);  // [A]nswer

        do UserInterface.drawUnfilledRectangle(0, 20, 80, 188);  // Code Frame
        do UserInterface.drawUnfilledRectangle(80, 20, 136, 188);  // Comment Frame
        do UserInterface.drawUnfilledRectangle(0, 188, 136, 229);  // Answer Frame
        return;
    }

    function void drawContentFrame() {
        do UserInterface.drawUnfilledRectangle(354, 20, 440, 45);  // title
        do Output.moveCursor(3, 46);
        do Output.printString(contentTitle);

        do UserInterface.drawUnfilledRectangle(354, 45, 440, 174);  // frame
        return;
    }

    function void drawLookupFrame() {
        
        // Frame
        do Screen.drawLine(226, 229, 290, 229);  // Upper line
        do Screen.drawLine(226, 229, 226, 243);  // Left line
        do Screen.drawLine(290, 229, 290, 243);  // Right line
        do Screen.drawLine(226, 243, 258, 255);  // Left Diagonal
        do Screen.drawLine(290, 243, 258, 255);  // Right Diagonal
        
        do Output.moveCursor(21, 39);
        // do Output.printString("[@]Lookup Address");
        do Output.printString("[L]ookup Address");
        do Output.moveCursor(21, 29);
        do Output.printChar(atSign);
        return;
    }

    function void drawFriendsFrames() {

        do UserInterface.drawUnfilledRectangle(440, 20, 511, 77);
        do UserInterface.drawUnfilledRectangle(440, 77, 511, 139);  // Comp a bit
        do UserInterface.drawUnfilledRectangle(440, 139, 511, 197);
        do UserInterface.drawUnfilledRectangle(440, 197, 511, 255);


        do Sprites.drawQuestionMark1();
        do Sprites.drawQuestionMark2();
        do Sprites.drawQuestionMark3();


        do Sprites.drawSpriteShimonSmall();
        do Output.moveCursor(18, 56);
        do Output.printString(currentSelFriend);
        do Output.moveCursor(19, 56);
        do Output.printString("@SHIMON");


        do Output.moveCursor(13, 56);
        do Output.printString(callingFriend);
        do Output.moveCursor(14, 57);
        do Output.printString("@GINI");
        // do Sprites.drawSpriteGiniSmall();

        do Output.moveCursor(7, 56);
        do Output.printString(unknownFriend);
        do Output.moveCursor(8, 57);
        do Output.printString("@TEST");

        do Output.moveCursor(2, 56);
        do Output.printString(callingFriend);
        do Output.moveCursor(3, 57);
        do Output.printString("@BOBO");


        return;
    }

    function void drawUnfilledRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x2, y1);  // Upper line
        do Screen.drawLine(x1, y2, x2, y2);  // Bottom line
        do Screen.drawLine(x1, y1, x1, y2);  // Left line
        do Screen.drawLine(x2, y1, x2, y2);  // Right line
        return;
    }

    function void drawInstruction(int type) {
        var String instruction;
        if (type = 0) { let instruction = escapeInstruction; }
        if (type = 1) { let instruction = enterInstruction; }
        
        do Output.moveCursor(0,0);
        do Output.printString(instruction);
        return;
    }

    function void clearInstruction() {
        do Output.moveCursor(0,0);
        do Output.printString(clearInstruction);
        return;
    }

    function void printAlignedTitle(String title) {
        var int delta;
        let delta = maxTitleLen - title.length();
        do Output.moveCursor(
            titleStartRowIndex, titleStartColumnIndex + (delta / 2) - 1);
        do Output.printChar(atSign);
        do Output.printString(title);
        do title.dispose();
        return;
    }

    function void drawSelArrows(Array selCoordDraw) {

        // do Output.moveCursor(selCoordDraw[0], selCoordDraw[1]);
        // do Output.printChar(selRightArrow);

        do Output.moveCursor(selCoordDraw[2], selCoordDraw[3]);
        do Output.printChar(selLeftArrow);

        do Output.moveCursor(selCoordDraw[4], selCoordDraw[5]);
        do Output.printChar(asterisk);

        do UserInterface.drawTextBox();

        return;
    }

    function void drawChallengeSel(int selBuffer, boolean draw) {
        let selBuffer = selBuffer + 5;  // 5 being the base index row (0)
        do Output.moveCursor(selBuffer, 17);

        if (draw) { do Output.printChar(selLeftArrow); }
        else { do Output.printChar(32); }

        do UserInterface.drawChallengeFrame();
        do UserInterface.drawTextBox();

        do Output.moveCursor(22, 11);
        if (draw) { do Output.printChar(asterisk); }
        else { do Output.printChar(32); }
        return;
    }

    function void eraseSelArrows(Array selCoordErase) {

        do Output.moveCursor(selCoordErase[0], selCoordErase[1]);
        do Output.printChar(blankSpace);

        do Output.moveCursor(selCoordErase[2], selCoordErase[3]);
        do Output.printChar(blankSpace);

        do Output.moveCursor(selCoordErase[4], selCoordErase[5]);
        do Output.printChar(blankSpace);

        do UserInterface.drawTextBox();

        return;
    }

    function void initLookUpSelCoords() {
        let selCoordLookUp = Array.new(6);
        let selCoordLookUp[0] = 21;
        let selCoordLookUp[1] = 27;
        let selCoordLookUp[2] = 21;
        let selCoordLookUp[3] = 37;
        let selCoordLookUp[4] = 22;
        let selCoordLookUp[5] = 32;

        return;
    }

    function void initAnswerSelCoords() {
        let selCoordAnswer = Array.new(6);
        let selCoordAnswer[0] = 18;
        let selCoordAnswer[1] = 5;
        let selCoordAnswer[2] = 18;
        let selCoordAnswer[3] = 17;
        let selCoordAnswer[4] = 22;
        let selCoordAnswer[5] = 11;

        return;
    }

    function Array getSelCoordAnswer() {
        return selCoordAnswer;
    }

    function Array getSelCoordLookUp() {
        return selCoordLookUp;
    }

    function void clearPromptLines() {
        do Output.moveCursor(0,0);
        do Output.printString(blankPromptLine);
        do Output.moveCursor(1,0);
        do Output.printString(blankPromptLine);

        return;
    }

    function void clearDialogueBox() {
        do Screen.setColor(false);
        do Screen.drawRectangle(137, 175, 439, 228);
        do Screen.setColor(true);
        return;
    }

    function void clearChallenge() {
        do Screen.setColor(false);
        do Screen.drawRectangle(1, 21, 79, 187);
        do Screen.drawRectangle(81, 21, 135, 187);
        do Screen.drawRectangle(1, 189, 135, 228);
        do Screen.setColor(true);
        return;
    }

    function void signalIncorrectAnswer() {
        do Output.moveCursor(0,0);
        do Output.printString(clearInstruction);
        do Output.moveCursor(0,0);
        do Output.printString(incorrectSignal);
        do Sys.wait(2500);
        do Output.moveCursor(0,0);
        do Output.printString(clearInstruction);
        do Output.moveCursor(0,0);
        do Output.printString(escapeInstruction);
        return;
    }

}
