class UserInterface {
    static int maxTitleLen, titleStartColumnIndex, titleStartRowIndex;
    static String challengeInstruction, escapeInstruction, clearInstruction;
    static String enterInstruction, arrowInst, arrowInstClear;
    static char selRightArrow, selLeftArrow, blankSpace, asterisk, atSign;
    static String currentSelFriend, callingFriend, unknownFriend, clearBarFriend; 
    static String challengeTitle, tempTitle, contentTitle, lookupTitle;
    static Array selCoordAnswer, selCoordLookUp;
    static String blankPromptLine, incorrectSignal;
    static int vpX1, vpX2, vpY1, vpY2, vpOffY1, vpOffY2;
    static int coX2, chX1, chX2;

    function void init() {
        do UserInterface.initStrCoords();
        do UserInterface.initStrInstructions();
        do UserInterface.initSymbols();
        do UserInterface.initUICoords();

        do UserInterface.initAnswerSelCoords();
        do UserInterface.initLookUpSelCoords();
        do UserInterface.draw();

        // do UserInterface.printAlignedTitle("SHIMON");  // should happen elsewhere

        return;
    }

    function void initStrCoords() {
        let maxTitleLen = 30;
        let titleStartRowIndex = 3;
        let titleStartColumnIndex = 16;
        return;
    }

    function void initSymbols() {
        let selRightArrow = 62;
        let selLeftArrow = 60;
        let blankSpace = 32;
        let asterisk = 42;
        let atSign = 64;
        return;
    }

    function void initStrInstructions() {
        let challengeInstruction = "[C]hallenge Mode";
        let lookupTitle = "[L]ookup Address";
        let challengeTitle = "Challenge";
        let tempTitle = "temp";
        let contentTitle = "Content";
        let arrowInst = "Up-Down to Nav Buffers";
        let arrowInstClear = "                      ";
        let currentSelFriend = ">> @ <<";
        let unknownFriend = "** ? **";
        let callingFriend = "** ! **";
        let clearBarFriend = "       ";
        let blankPromptLine = "                                    ";
        let incorrectSignal = "XXX Incorrect, try again XXX";
        let escapeInstruction = " ** Press 'Escape' to Exit Current Mode **";
        let enterInstruction = " ** Press 'Enter' to continue **";
        let clearInstruction = "                                            ";
        return;
    }

    function void initUICoords() {

        let vpX1 = 136;
        let vpY1 = 20;
        let vpX2 = 354;
        let vpY2 = 174;
        
        let coX2 = 511;
        let chX1 = 0;
        let chX2 = 80;

        let vpOffY1 = 25;
        let vpOffY2 = 55;

        return;
    }
    function void draw() {

        // do UserInterface.drawEntireScreenBorders();

        // do UserInterface.drawMainFrame();

        do UserInterface.drawViewport();

        do UserInterface.drawTextBox();

        // do UserInterface.drawChallengeFrame();

        // do UserInterface.drawContentFrame();

        // do UserInterface.drawLookup();

        // do UserInterface.drawFriendsFrames();
        
        return;
    }

    function void drawEntireScreenBorders() {
        do Screen.setColor(true);
        do UserInterface.drawUnfilledRec(0, 0, 511, 255);
        return;
    }

    function void drawMainFrame() {
        do Screen.setColor(true);
        do UserInterface.drawUnfilledRec(0, vpY1, coX2, vpY2 + vpOffY2);
        return;
    }

    function void drawViewport() {
        do Screen.setColor(true);
        do UserInterface.drawUnfilledRec(vpX1, vpY1, vpX2, vpY2 - 129);  // title
        do UserInterface.drawUnfilledRec(vpX1, vpY1 + vpOffY1, vpX2, vpY2);  // viewport
        return;
    }

    function void drawTextBox() {
        do Screen.setColor(true);
        do UserInterface.drawUnfilledRec(vpX1, vpY2, coX2, vpY2 + vpOffY2);
        return;
    }

    function void drawChallengeFrame() {
        do Screen.setColor(true);
        do UserInterface.drawUnfilledRec(chX1, vpY1, vpX1, vpY1 + vpOffY1);  // title
        do Output.moveCursor(3, 1);
        do Output.printString(challengeTitle);
        do Output.moveCursor(3, 12);
        do Output.printString(tempTitle);
        do Output.moveCursor(21, 0);
        do Output.printString(challengeInstruction);  // [A]nswer

        do UserInterface.drawUnfilledRec(chX1, vpY1, chX2, vpY2);  // Code Frame
        do UserInterface.drawUnfilledRec(chX2, vpY1, vpX1, vpY2);  // Comment Frame
        do UserInterface.drawUnfilledRec(chX1, vpY2, vpX1, vpY2 + vpOffY2);  // Answer Frame
        return;
    }

    function void drawContentFrame() {
        do Screen.setColor(true);
        do UserInterface.drawUnfilledRec(vpX2, vpY1, coX2, vpY1 + vpOffY1);  // title
        do Output.moveCursor(3, 46);
        do Output.printString(contentTitle);

        do UserInterface.drawUnfilledRec(vpX2, vpY1 + vpOffY1, coX2, vpY2);  // frame
        return;
    }

    function void drawLookupFrame() {
        do Screen.setColor(true);
        
        // Frame
        do Screen.drawLine(226, vpY2 + vpOffY2, 290, vpY2 + vpOffY2);  // Upper line
        do Screen.drawLine(226, vpY2 + vpOffY2, 226, 243);  // Left line
        do Screen.drawLine(290, vpY2 + vpOffY2, 290, 243);  // Right line
        do Screen.drawLine(226, 243, 258, 255);  // Left Diagonal
        do Screen.drawLine(290, 243, 258, 255);  // Right Diagonal
        
        do Output.moveCursor(21, 39);
        do Output.printString(lookupTitle);
        do Output.moveCursor(21, 29);
        do Output.printChar(atSign);
        return;
    }

    function void drawFriendsFrames() {
        do Screen.setColor(true);

        do UserInterface.drawUnfilledRec(coX2, vpY1, 511, 77);
        do UserInterface.drawUnfilledRec(coX2, 77, 511, 139);  // Comp a bit
        do UserInterface.drawUnfilledRec(coX2, 139, 511, 197);
        do UserInterface.drawUnfilledRec(coX2, 197, 511, 255);


        do Sprites.drawQuestionMark1();
        do Sprites.drawQuestionMark2();
        do Sprites.drawQuestionMark3();


        do Sprites.drawSpriteShimonSmall();
        do Output.moveCursor(18, 56);
        do Output.printString(currentSelFriend);
        do Output.moveCursor(19, 56);
        do Output.printString("@SHIMON");


        do Output.moveCursor(13, 56);
        do Output.printString(callingFriend);
        do Output.moveCursor(14, 57);
        do Output.printString("@GINI");
        // do Sprites.drawSpriteGiniSmall();

        do Output.moveCursor(7, 56);
        do Output.printString(unknownFriend);
        do Output.moveCursor(8, 57);
        do Output.printString("@TEST");

        do Output.moveCursor(2, 56);
        do Output.printString(callingFriend);
        do Output.moveCursor(3, 57);
        do Output.printString("@BOBO");


        return;
    }

    function void drawUnfilledRec(int x1, int y1, int x2, int y2) {
        do Screen.setColor(true);

        do Screen.drawLine(x1, y1, x2, y1);  // Upper line
        do Screen.drawLine(x1, y2, x2, y2);  // Bottom line
        do Screen.drawLine(x1, y1, x1, y2);  // Left line
        do Screen.drawLine(x2, y1, x2, y2);  // Right line
        return;
    }

    function void drawInstruction(int type) {
        var String instruction;
        if (type = 0) { let instruction = escapeInstruction; }
        if (type = 1) { let instruction = enterInstruction; }
        
        do Output.moveCursor(0,0);
        do Output.printString(instruction);
        return;
    }

    function void clearInstruction() {
        do Output.moveCursor(0,0);
        do Output.printString(clearInstruction);
        return;
    }

    function void printAlignedTitle(String aTitle) {
        var int delta;
        do UserInterface.clearViewportTitle();

        let delta = maxTitleLen - aTitle.length();
        do Output.moveCursor(titleStartRowIndex, titleStartColumnIndex + (delta / 2) - 1);
        do Output.printChar(atSign);
        do Output.printString(aTitle);
        return;
    }


    function void drawSelArrows(Array selCoordDraw) {

        // do Output.moveCursor(selCoordDraw[0], selCoordDraw[1]);
        // do Output.printChar(selRightArrow);

        do Output.moveCursor(selCoordDraw[2], selCoordDraw[3]);
        do Output.printChar(selLeftArrow);

        do Output.moveCursor(selCoordDraw[4], selCoordDraw[5]);
        do Output.printChar(asterisk);

        do UserInterface.drawTextBox();

        return;
    }

    function void drawChallengeSel(int selBuffer, boolean draw) {
        let selBuffer = selBuffer + 5;  // 5 being the base index row (0)
        do Output.moveCursor(selBuffer, 17);

        if (draw) { do Output.printChar(selLeftArrow); }
        else { do Output.printChar(32); }

        do UserInterface.drawChallengeFrame();
        do UserInterface.drawTextBox();

        do Output.moveCursor(21, 17);
        // do Output.moveCursor(22, 8);  // old mid
        if (draw) {
            do Output.printChar(asterisk);
            do Output.moveCursor(22, 0);
            do Output.printString(arrowInst);
        }
        else {
            do Output.printChar(32);
            do Output.moveCursor(22, 0);
            do Output.printString(arrowInstClear);
        }
        return;
    }

    function void eraseSelArrows(Array selCoordErase) {

        do Output.moveCursor(selCoordErase[0], selCoordErase[1]);
        do Output.printChar(blankSpace);

        do Output.moveCursor(selCoordErase[2], selCoordErase[3]);
        do Output.printChar(blankSpace);

        do Output.moveCursor(selCoordErase[4], selCoordErase[5]);
        do Output.printChar(blankSpace);

        do UserInterface.drawTextBox();

        return;
    }

    function void initLookUpSelCoords() {
        let selCoordLookUp = Array.new(6);
        let selCoordLookUp[0] = 21;
        let selCoordLookUp[1] = 27;
        let selCoordLookUp[2] = 21;
        let selCoordLookUp[3] = 37;
        let selCoordLookUp[4] = 22;
        let selCoordLookUp[5] = 32;

        return;
    }

    function void initAnswerSelCoords() {
        let selCoordAnswer = Array.new(6);
        let selCoordAnswer[0] = 18;
        let selCoordAnswer[1] = 5;
        let selCoordAnswer[2] = 18;
        let selCoordAnswer[3] = 17;
        let selCoordAnswer[4] = 22;
        let selCoordAnswer[5] = 11;

        return;
    }

    function Array getSelCoordAnswer() {
        return selCoordAnswer;
    }

    function Array getSelCoordLookUp() {
        return selCoordLookUp;
    }

    function void clearPromptLines() {
        do Output.moveCursor(0,0);
        do Output.printString(blankPromptLine);
        do Output.moveCursor(1,0);
        do Output.printString(blankPromptLine);

        return;
    }

    function void clearDialogueBox() {
        do Screen.setColor(false);
        do Screen.drawRectangle(vpX1 + 1, vpY2 + 1, 439, 228);
        do Screen.setColor(true);
        return;
    }

    function void clearChallengeAll() {
        do Screen.setColor(false);
        do Screen.drawRectangle(1, vpY1 + 1, 79, vpY2 - 1);  // Code Frame
        do Screen.drawRectangle(81, vpY1 + 1, vpX1 - 1, vpY2 - 1);  // Comment Frame
        do Screen.drawRectangle(1, vpY2 + 1, vpX1 - 1, 228);  // Answer Frame
        do Screen.setColor(true);
        return;
    }

    function void clearChallengeCode() {
        do Screen.setColor(false);
        do Screen.drawRectangle(chX1 + 1, vpY1 + 1, 79, vpY2 - 1);  // Code Frame
        do Screen.setColor(true);
        return;
    }

    function void clearChallengeComment() {
        do Screen.setColor(false);
        do Screen.drawRectangle(81, vpY1 + 1, vpX1 - 1, vpY2 - 1);  // Comment Frame
        do Screen.setColor(true);
        return;
    }

    function void clearChallengeAnswer() {
        do Screen.setColor(false);
        do Screen.drawRectangle(chX1 + 1, vpY2 + 1, vpX1 - 1, 228);  // Answer Frame
        do Screen.setColor(true);
        return;
    }

    function void clearContentFrame() {
        do Screen.setColor(false);
        do Screen.drawRectangle(vpX2 + 1, vpY1 + vpOffY1 + 1, coX2 - 1, vpY2 - 1);
        do Screen.setColor(true);
        return;
    }

    function void clearViewportTitle() {
        do Screen.setColor(false);
        do Screen.drawRectangle(vpX1 + 1, vpY1 + 1, vpX2 - 1, 44);
        do Screen.setColor(true);
        return;
    }

    function void signalIncorrectAnswer() {
        do Output.moveCursor(0,0);
        do Output.printString(clearInstruction);
        do Output.moveCursor(0,0);
        do Output.printString(incorrectSignal);
        do Sys.wait(2500);
        do Output.moveCursor(0,0);
        do Output.printString(clearInstruction);
        do Output.moveCursor(0,0);
        do Output.printString(escapeInstruction);
        return;
    }

}
