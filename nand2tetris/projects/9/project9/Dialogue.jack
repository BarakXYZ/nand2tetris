class Dialogue {

    static DialogueNode currDialogueNode;
    static Array dialogueNodeArr;

    function void init() {
        let dialogueNodeArr = Array.new(5);
        return;
    }

    function void makeNode(int quest) {

        if (quest = 0) {
            let dialogueNodeArr[0] = DialogueNode.makeIntro();
            let currDialogueNode = dialogueNodeArr[0];
            return;
        }

        if (quest = 1) {
            do currDialogueNode.dispose();
            let dialogueNodeArr[0] = DialogueNode.makeSHIMON1();
            let currDialogueNode = dialogueNodeArr[0];
            return;
        }

        if (quest = 2) {
            do currDialogueNode.dispose();
            let dialogueNodeArr[0] = DialogueNode.makeSHIMON2();
            let currDialogueNode = dialogueNodeArr[0];
            return;
        }

        if (quest = 3) {
            do currDialogueNode.dispose();
            let dialogueNodeArr[0] = DialogueNode.makeSHIMON3();
            let dialogueNodeArr[1] = DialogueNode.makeEnemyGNIRUT();
            let currDialogueNode = dialogueNodeArr[0];
            return;
        }

        if (quest = 4) {
            do currDialogueNode.dispose();
            let dialogueNodeArr[0] = DialogueNode.makeSHIMON4();
            let dialogueNodeArr[2] = DialogueNode.makeEnemyLOLO();
            let currDialogueNode = dialogueNodeArr[0];
            return;
        }

        return;
    }

    //** Update Enemy Node to Completed (Friend) *//
    function void updateToFriend(int quest) {
        if (quest = 3) {
            do currDialogueNode.dispose();
            let dialogueNodeArr[1] = DialogueNode.makeFriendGNIRUT();
            let currDialogueNode = dialogueNodeArr[1];
            return;
        }
        return;
    }

    function void setDialogueNode(int aIndex) {
        let currDialogueNode = dialogueNodeArr[aIndex];
        return;
    }

    function void draw() {
        do UserInterface.clearDialogueBox();

        if (~(currDialogueNode.hasEnded())) {
            do UserInterface.drawInstruction(1);
            while (~(currDialogueNode.hasEnded())) {
                do currDialogueNode.draw();
                do Sys.wait(300);
                do Input.waitForEnter();
            }
            do UserInterface.clearInstruction();
        } else {
            do currDialogueNode.draw();
        }
        return;
    }

    function void endDialogue() {
        do currDialogueNode.end();
        return;
    }

}
