class DialogueNode {

    field int currentLine, lastLine, numOfBatches, currentBatch;
    field int subDialogueIndex, totalDialogues;
    field String t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
    field String t15, t16, t17, t18, t19, t20, t21, t22, t23;
    field String td0, td1, td2, td3, td4;
    field Array mainDialogue, defaultDialogue;
    field boolean hasEnded;
    static char slashSymbol;

    function void init() {
        let slashSymbol = 47;
        return;
    }

    method void draw(boolean isDefault) {
        var int i;
        let i = 0;
        do UserInterface.clearDialogueBox();

        while (i < 4) {
            do Output.moveCursor(16 + i, 22);
            if (~(hasEnded)) { do Output.printString(mainDialogue[currentLine+i]); }
            else { do Output.printString(defaultDialogue[i]); }
            let i = i + 1;
        }

        do drawDialogueEnumeration();
        do UserInterface.drawDialogueBox();

        if (~hasEnded) {
            let subDialogueIndex = subDialogueIndex + 1;
            let currentLine = currentLine + 4;
            if (currentLine = lastLine) {
                let subDialogueIndex = 1;
                let totalDialogues = 1;
                let hasEnded = true;
            }
        }
        return;
    }

    method void drawDialogueEnumeration() {
        do Output.moveCursor(16, 60);
        do Output.printInt(subDialogueIndex);
        do Output.printChar(slashSymbol);
        do Output.printInt(totalDialogues);
        return;
    }

    method void end() {
        let hasEnded = true;
        return;
    }
    
    method boolean hasEnded() {
        return hasEnded;
    }

    method void initNodeParams(int aLastLine) {
        let lastLine = aLastLine;
        let totalDialogues = lastLine / 4;
        let subDialogueIndex = 1;
        let currentLine = 0;
        return;
    }

    method void assignDialogueToArr() {

        let mainDialogue = Array.new(24);

        let mainDialogue[0] = t0;
        let mainDialogue[1] = t1;
        let mainDialogue[2] = t2;
        let mainDialogue[3] = t3;

        let mainDialogue[4] = t4;
        let mainDialogue[5] = t5;
        let mainDialogue[6] = t6;
        let mainDialogue[7] = t7;

        let mainDialogue[8] = t8;
        let mainDialogue[9] = t9;
        let mainDialogue[10] = t10;
        let mainDialogue[11] = t11;

        let mainDialogue[12] = t12;
        let mainDialogue[13] = t13;
        let mainDialogue[14] = t14;
        let mainDialogue[15] = t15;

        let mainDialogue[16] = t16;
        let mainDialogue[17] = t17;
        let mainDialogue[18] = t18;
        let mainDialogue[19] = t19;

        let mainDialogue[20] = t20;
        let mainDialogue[21] = t21;
        let mainDialogue[22] = t22;
        let mainDialogue[23] = t23;

        let defaultDialogue = Array.new(5);
        let defaultDialogue[0] = td0;
        let defaultDialogue[1] = td1;
        let defaultDialogue[2] = td2;
        let defaultDialogue[3] = td3;
        let defaultDialogue[4] = td4;

        return;
    }

    method void dispose() {
        //** Dispose all Strings *//
        do t0.dispose();
        do t1.dispose();
        do t2.dispose();
        do t3.dispose();

        do t4.dispose();
        do t5.dispose();
        do t6.dispose();
        do t7.dispose();

        do t8.dispose();
        do t9.dispose();
        do t10.dispose();
        do t11.dispose();

        do t12.dispose();
        do t13.dispose();
        do t14.dispose();
        do t15.dispose();

        do t16.dispose();
        do t17.dispose();
        do t18.dispose();
        do t19.dispose();

        do t20.dispose();
        do t21.dispose();
        do t22.dispose();
        do t23.dispose();

        do td0.dispose();
        do td1.dispose();
        do td2.dispose();
        do td3.dispose();
        do td4.dispose();

        do mainDialogue.dispose();
        do defaultDialogue.dispose();

        //** Dispose Object *//
        do Memory.deAlloc(this);
        return;
    }

    //** NODES *//

    constructor DialogueNode makeNode0() {
        do initNodeParams(12);
        let hasEnded = false;

        let t0 = "Hello there young programmer!";
        let t1 = "I'm glad you showed up.";
        let t2 = "Before we move on to build a compiler,";
        let t3 = "I have a few cool challenges for you!";

        let t4 = "I want to make sure you have all the";
        let t5 = "basics nailed out. So I've prepared";
        let t6 = "some interesting assembly challenges";
        let t7 = "for you to solve!";

        let t8 = "They are... a bit involved...";
        let t9 = "But no worries, we'll start with the";
        let t10 = "big picture; go through everything";
        let t11 = "step-by-step and get you up and running!";

        let t12 = "";
        let t13 = "";
        let t14 = "";
        let t15 = "";

        let t16 = "";
        let t17 = "";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";
        
        let td0 = "";
        let td1 = "";
        let td2 = "";
        let td3 = "";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }
    
    constructor DialogueNode makeNode1() {
        do initNodeParams(24);
        let hasEnded = false;

        let t0 = "This is the 'Challenge' pane.";
        let t1 = "The assembly code you'll need to solve";
        let t2 = "will be shown within it.";
        let t3 = "Each line has a corresponding number.";

        let t4 = "Press 'C' to enter '[C]hallenge Mode'";
        let t5 = "Then, start to type your answers.";
        let t6 = "When you're ready, press 'Enter' to";
        let t7 = "submit your response.";

        let t8 = "You can also use the Up & Down arrows";
        let t9 = "to navigate the comment buffers.";
        let t10 = "You have 4 'Response Buffers' and";
        let t11 = "11 convenient 'Comment Buffers'.";

        let t12 = "The 'Response Buffers' will be";
        let t13 = "checked internally to see if your";
        let t14 = "response was correct. The Comment Buffers";
        let t15 = "will serve as helpers to track the flow";

        let t16 = "of the assembly program.";
        let t17 = "Soon the challenges will become more";
        let t18 = "difficult, and you'll... need them.";
        let t19 = "        **muahahahah**";

        let t20 = "Ok, let's start!";
        let t21 = "Here's your first challenge.";
        let t22 = "Enjoy it while it's still... possible.";
        let t23 = "         GL  (^_^)";

        let td0 = "";
        let td1 = "";
        let td2 = "";
        let td3 = "";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }
    constructor DialogueNode makeNode2() {
        do initNodeParams(16);
        let hasEnded = false;

        let t0 = "Nice job!";
        let t1 = "I already see you got what it takes!";
        let t2 = "So let's spice it up then...";
        let t3 = "Here's the 'Content' pane.";

        let t4 = "In it, you'll see the attributes";
        let t5 = "of the currently selected memory cell";
        let t6 = "For example: my SymName=SHIMON";
        let t7 = "Address=555, and Value=42 (set by you).";

        let t8 = "It will also contain additional info";
        let t9 = "which will help you solve the next";
        let t10 = "challenges. So please look carefully!";
        let t11 = "";

        let t12 = "Ok, let's move on...";
        let t13 = "Here is your next challenge...";
        let t14 = "Good luck and Break a line!";
        let t15 = "";

        let t16 = "";
        let t17 = "";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";

        let td0 = "";
        let td1 = "";
        let td2 = "";
        let td3 = "";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }

    constructor DialogueNode makeNode31() {
        do initNodeParams(20);
        let hasEnded = false;

        let t0 = "Pew! Pew! You got this, huh?!";
        let t1 = "Let's move on... to the next level!";
        let t2 = "Let me introduce the '[L]ookup' utility.";
        let t3 = "You can use it to... lookup addresses! Da.";

        let t4 = "By pressing 'L', you'll enter the";
        let t5 = "'[L]ookup Mode', where you can type";
        let t6 = "an address, look it up by hitting 'Enter'";
        let t7 = "and face with what it holds! **HEHEHE**";

        let t8 = "In this challenge, you will actually";
        let t9 = "need to go lookup and solve another ";
        let t10 = "address's challenge, discover its value,";
        let t11 = "and then come back to my address by either";

        let t12 = "looking up 'SHIMON' or '555' (both";
        let t13 = "the SymName or Address will work)";
        let t14 = "in order to complete the main challenge!";
        let t15 = "";

        let t16 = "I'll be here waiting, good luck!";
        let t17 = "Send my regards to... well, you'll see.";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";

        let td0 = "Hey again!";
        let td1 = "So... have you met GNIRUT?!";
        let td2 = "Once you beat his challenge, you'll";
        let td3 = "discover his value. Go get him, tiger!";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }

    constructor DialogueNode makeNode32() {
        do initNodeParams(4);
        let hasEnded = true;

        let t0 = "";
        let t1 = "";
        let t2 = "";
        let t3 = "";

        let t4 = "";
        let t5 = "";
        let t6 = "";
        let t7 = "";

        let t8 = "";
        let t9 = "";
        let t10 = "";
        let t11 = "";

        let t12 = "";
        let t13 = "";
        let t14 = "";
        let t15 = "";

        let t16 = "";
        let t17 = "";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";

        let td0 = "I CAME, I SAW, I CRASHED.";
        let td1 = "     ...Wh00p$...";
        let td2 = "*#&(&@(*$&(&%)!*@#&(!*))";
        let td3 = "^&#!@^!^@)#!)!)!)!)@*@";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }

    constructor DialogueNode makeNode33() {
        do initNodeParams(4);
        let hasEnded = true;

        let t0 = "";
        let t1 = "";
        let t2 = "";
        let t3 = "";

        let t4 = "";
        let t5 = "";
        let t6 = "";
        let t7 = "";

        let t8 = "";
        let t9 = "";
        let t10 = "";
        let t11 = "";

        let t12 = "";
        let t13 = "";
        let t14 = "";
        let t15 = "";

        let t16 = "";
        let t17 = "";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";

        let td0 = "Thank you! You've saved me from a";
        let td1 = "deadly segmentation fault!";
        let td2 = "I owe you one (or zero) <3";
        let td3 = "";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }


    constructor DialogueNode makeNode40() {
        do initNodeParams(8);
        let hasEnded = false;

        let t0 = "Woohoo!";
        let t1 = "You're definitely not messing around!";
        let t2 = "We have 2 more challenges to go, but...";
        let t3 = "they won't be easy...";

        let t4 = "In this one you'll also need to face";
        let t5 = "some jumping (goto) logic.";
        let t6 = "Good luck!";
        let t7 = "";

        let t8 = "";
        let t9 = "";
        let t10 = "";
        let t11 = "";

        let t12 = "";
        let t13 = "";
        let t14 = "";
        let t15 = "";

        let t16 = "";
        let t17 = "";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";

        let td0 = "Jump like a frog, yet think like a...";
        let td1 = "borg?! idk.";
        let td2 = "LOLO likes to jump, catch him!";
        let td3 = "I count on you, jump kiddo jump!";

        let td4 = "";  // Without this, there's a bug. It's not being used though.

        do assignDialogueToArr();

        return this;
    }

    constructor DialogueNode makeNode41() {
        do initNodeParams(4);
        let hasEnded = true;  // Enemy Dialogue == true

        let t0 = "";
        let t1 = "";
        let t2 = "";
        let t3 = "";

        let t4 = "";
        let t5 = "";
        let t6 = "";
        let t7 = "";

        let t8 = "";
        let t9 = "";
        let t10 = "";
        let t11 = "";

        let t12 = "";
        let t13 = "";
        let t14 = "";
        let t15 = "";

        let t16 = "";
        let t17 = "";
        let t18 = "";
        let t19 = "";

        let t20 = "";
        let t21 = "";
        let t22 = "";
        let t23 = "";

        let td0 = "I'm here.";
        let td1 = "               I'm there.";
        let td2 = "      I'm everywhere!";
        let td3 = "You got no chance lol(0)";
        let td4 = "";

        do assignDialogueToArr();

        return this;
    }
}
