//** Written & Designed by BarakXYZ (Barak Arosh Surian) in 2024
// As part of Week 9 assignment @NAND2TETRIS by Shimon Shocken & Noam Nisan *//

//** Implements the visual aspect of the sprites, called from Draw to draw to currently selected NPC sprite, and holds coordinates for sprite locations. Note that Shimon's sprite is implemented in SpriteShimon, since it was made with the graphical interface for creating sprites and contains lots of unimportant code. Other than that, this class is responsible for implementing the enemies and friends sprites *//
class Sprites {

static int currentSelSprite;
static int shimonBigCoord, enemyCoordX, enemyCoordY, enemyInstances;

function void init() {
    let currentSelSprite = 0;
    let shimonBigCoord = 1739;
    let enemyCoordX = 245;
    let enemyCoordY = 110;
    let enemyInstances = 1;
    return;
}

function void setCurrentSprite(int sel) {
    let currentSelSprite = sel;
    return;
}

function int getCurrentSprite() {
    return currentSelSprite;
}

function void drawCurrentSelSprite(boolean cond) {
    var int activeNPC;
    let activeNPC = NPC.getActive();

    if (activeNPC = 0) { do Sprites.drawSpriteShimon(~cond); return; }
    else {
        if (~(NPC.isEnemyDefeated())) {
            do Sprites.drawEnemy(~cond, activeNPC, enemyCoordX, enemyCoordY);
        }
        else { do Sprites.drawHappyFlower(~cond, enemyCoordX, enemyCoordY);}
        return;
    }
}

// Draw Shimon Big & Small
function void drawSpriteShimon(boolean isFlipped) {
    if (isFlipped) { do SpriteShimon.drawShimonBig(shimonBigCoord); }
    else { do SpriteShimon.drawShimonBigFlipped(shimonBigCoord); }
    return;
}

function void drawEnemy(boolean isEyeOpened, int level, int aX, int aY) {
    var int x, y, offY, offMouthX, offMouthY, spikiness, direction, length;
    var int hornWidth, hornsOffY, instOffX, instOffY;
    var boolean cond;
    let x = aX;
    let y = aY;
    let offY = 12;
    let offMouthX = 20;
    let offMouthY = 14;
    let spikiness = 2; // Higher value for more spiky, lower for less
    let direction = 1; // 1 for right rotation, -1 for left rotation
    let length = 50;   // Length of the horns
    let hornWidth = 40; // Distance between the horns
    let hornsOffY = -55;  // Vertical offset of the horns
    let cond = true;
    let instOffX = 30;
    let instOffY = 10;

    if (level > 1) { do Sprites.drawTriangle(30, x, y - 60, spikiness, direction, cond); }  // Mid Horn

    //** LOLO *//
    if (level = 2) {
        do Sprites.drawHorn(x - hornWidth, y + hornsOffY, direction, length);  // L
        do Sprites.drawHorn(x + hornWidth, y + hornsOffY, -direction, length);  // R
    }

    //** NAND & TETRIS's Clones *//
    if (level > 3) {
        let cond = false;
    }

    //** TETRIS *//
    if (level = 4) {
        let cond = true;
        do Sprites.drawEnemy(~isEyeOpened, 5, aX+instOffX, aY-instOffY);
        do Sprites.drawEnemy(~isEyeOpened, 5, aX-instOffX, aY-instOffY);
    }


    // body
    if (level = 3) { do Screen.setColor(~cond); }
    else { do Screen.setColor(cond); }
    do Screen.drawCircle(x, y, 40);
    if ((level = 3) & isEyeOpened) { do Screen.setColor(cond); }
    else { do Screen.setColor(~cond); }
    do Screen.drawCircle(x, y, 37);

    do Sprites.drawEnemyEye(isEyeOpened, x, y, offY, 1);
    if (level > 3) {
        do Sprites.drawEnemyEye(~isEyeOpened, x, y-15, offY, 2);
    }

    // Mouth Line
    do Screen.setColor(cond);
    do Screen.drawRectangle(x-offMouthX, y+offMouthY, x-offMouthX+45, y+offMouthY+2);
    do Sprites.drawTeeth(x, y, offMouthY, cond, isEyeOpened, level);
    
    return;
}

//** Radius -> bigger value for smaller eye, 1 for regular size *//
function void drawEnemyEye(boolean isOpened, int x, int y, int offY, int radius) {
    // Eye
    do Screen.setColor(true);
    do Screen.drawCircle(x, y - offY, 14 / radius);
    
    // Stroke
    do Screen.setColor(false);
    do Screen.drawCircle(x, y - offY, 12 / radius);
    do Screen.setColor(true);

    if (isOpened) { do Screen.drawCircle(x, y - offY, 5 / radius); }  // inner
    else { do Screen.drawRectangle(x-12, y-14, x+12, y-13); } // closed

    return;
}

function void drawTeeth(int x, int y, int offMouthY, boolean cond, boolean isEyeOpened, int level) {
    do Screen.drawRectangle(x-10, y+offMouthY, x-4, y+offMouthY+10);
    if ((level = 3) & isEyeOpened) { do Screen.setColor(cond); }
    else { do Screen.setColor(~cond); }
    do Screen.drawRectangle(x-8, y+offMouthY+2, x-6, y+offMouthY+10-2);
    return;
}

function void drawTriangle(int size, int x, int y, int spikiness, int dir, bool draw) {
    var int i;
    do Screen.setColor(draw);
    let i = 0;
    while (i < size) {
        do Screen.drawRectangle(x - ((i / spikiness) * dir), y + i, x + ((i / spikiness) * dir), y + i + 1);
        let i = i + 1;
    }
    return;
}

function void drawUpsideTriangle(int size, int x, int y, int spikiness, int dir, bool draw) {
    var int i;
    var int offset;
    var int startX;
    var int endX;
    
    do Screen.setColor(draw);
    let i = 0;
    while (i < size) {
        let offset = (i / spikiness) * dir;
        let startX = x - offset;
        let endX = x + offset;
        
        // Draw rectangle line by line, correcting for possible illegal coordinates
        if (startX < 0) {
            let startX = 0;
        }
        if (endX > 511) {
            let endX = 511;
        }
        if (y - i > 0) {
            do Screen.drawRectangle(startX, y - i, endX, y - i + 1);
        }

        let i = i + 1;
    }
    return;
}


function void drawHorn(int x, int y, int direction, int length) {
    do Screen.setColor(true);
    // Line 1
    do Screen.drawLine(x, y, x + (30 * direction), y + length);
    // Line 2
    do Screen.drawLine(x, y, x + (15 * direction), y + (length - 10));
    // Line 3
    do Screen.drawLine(x, y, x + (20 * direction), y + (length - 30));
    return;
}

function void drawHappyFlower(boolean switch, int aX, int aY) {

    var int x, y, offX1, offY1, offX2, offY2, r1, r2;
    let x = aX;
    let y = aY;

    // let offX1 = 12;
    let offY1 = 40;
    let offX2 = 34;
    let offY2 = 20;

    let r1 = 22;
    let r2 = 20;

    // Draw Petals
    do Sprites.drawPetal(x, y - offY1, r1, r2);  // Top Petal
    do Sprites.drawPetal(x, y + offY1, r1, r2);  // Bottom Petal
    do Sprites.drawPetal(x + offX2, y - offY2, r1, r2);  // Top Right Petal
    do Sprites.drawPetal(x - offX2, y - offY2, r1, r2);  // Top Left Petal
    do Sprites.drawPetal(x + offX2, y + offY2, r1, r2);  // Bot Right Petal
    do Sprites.drawPetal(x - offX2, y + offY2, r1, r2);  // Bot Left Petal

    // body
    do Screen.setColor(true);
    do Screen.drawCircle(x, y, 40);

    // Face
    if (switch) { do Sprites.drawFlowerFace(23, 15, x, y, 2, 1); }
    else { do Sprites.drawFlowerFace(23, 10, x, y, 1, 1); }

    return;
}

function void drawPetal(int x, int y, int r1, int r2) {
    do Screen.setColor(true);
    do Screen.drawCircle(x, y, r1);
    do Screen.setColor(false);
    do Screen.drawCircle(x, y, r2);
    return;
}

function void drawFlowerFace(int s1, int s2, int x, int y, int spikiness, int dir) {
    let y = y + 35;
    do Sprites.drawUpsideTriangle(s1, x, y, spikiness, dir, false);
    do Sprites.drawUpsideTriangle(s1, x, y - 4, spikiness, dir, true);

    let y = y - 62;
    do Sprites.drawTriangle(s2, x - 12, y, spikiness, dir, false);
    do Sprites.drawTriangle(s2, x - 12, y + 2, spikiness, dir, true);

    do Sprites.drawTriangle(s2, x + 12, y, spikiness, dir, false);
    do Sprites.drawTriangle(s2, x + 12, y + 2, spikiness, dir, true);

    return;
}

}
