class NPC {
    
    field Array npc;
    field String name, role;
    field int inM, npcIndex;

    static int numOfNPCs;
    static int activeNPC;  // Perhaps needs to be tracked through game?
    static int pendingNPC;
    static ChallengeNode currChallengeNode;
    static ContentNode contentNode;
    static Array challengeNodeArr;
    
    function void init() {
        let numOfNPCs = 0;
        let activeNPC = 0;
        let currChallengeNode = ChallengeNode.makeNode0();
        let contentNode = ContentNode.makeBlank();

        return;
    }

    function void interact() {
        
        do Debug.interactions();
        // if (pendingNPC = activeNPC) {
            do currChallengeNode.draw();
            do contentNode.draw();
            do Dialogue.draw();
            do QuestManager.manageQuest();
        // }
        // else {
            // default dialogue of this NPC at this point
        // }

        return;
    }
    
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    

    method int getStage() {
        return npc[4];
    }

    method void incStage() {
        let npc[4] = npc[4] + 1;  // increment stage by 1
        return;
    }

    function void setPending(int index) {
        let pendingNPC = index;
        return;
    }

    function int getActive() {
        return activeNPC;
    }

    function void setActive(int index) {
        let activeNPC = index;
        // 0 == Shimon
        // 1 == @357
        // 2 == ...
        return;
    }

    function void makeChallengeNode(int quest) {

        if (quest = 0) {
            let currChallengeNode = ChallengeNode.makeNode0();
            do Challenge.setSelBuffIndex(12);
            return;
        }

        if (quest = 1) {
            do currChallengeNode.dispose();
            let currChallengeNode = ChallengeNode.makeNode1();
            do Challenge.setSelBuffIndex(12);
            return;
        }

        if (quest = 2) {
            do currChallengeNode.dispose();
            let currChallengeNode = ChallengeNode.makeNode2();
            do Challenge.setSelBuffIndex(0);
            return;
        }

        if (quest = 3) {
            do currChallengeNode.dispose();
            let challengeNodeArr = Array.new(2);
            let challengeNodeArr[0] = ChallengeNode.makeNode31();
            let challengeNodeArr[1] = ChallengeNode.makeNode32();
            let currChallengeNode = challengeNodeArr[0];
            do Challenge.setSelBuffIndex(0);
            return;
        }

        if (quest = 4) {
            do Memory.deAlloc(challengeNodeArr[0]);
            do Memory.deAlloc(challengeNodeArr[1]);
            do currChallengeNode.dispose();
            do challengeNodeArr.dispose();

            // Make the new node and array

            do Challenge.setSelBuffIndex(0);
            return;
        }

        return;
    }

    function void setChallengeNode(int aIndex) {
        let currChallengeNode = challengeNodeArr[aIndex];
        return;
    }

    function void makeContentNode(int quest) {
        if (quest = 2) {
            let contentNode = ContentNode.makeShimon();
            return;
        }

        return;
    }

    function boolean checkChallengeAnswer(String buff12, String buff13, String buff14) {
        var boolean ret;
        let ret = currChallengeNode.checkAnswer(buff12, buff13, buff14);
        do Output.moveCursor(0,0);
        if (ret) { do QuestManager.complete(); }
        else { do UserInterface.signalIncorrectAnswer(); }
        return ret;
    }
}
