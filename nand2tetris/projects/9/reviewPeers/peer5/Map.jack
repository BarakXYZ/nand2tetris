class Map {
    field int capacity, maxLen, size;
    field Array data;

    constructor Map new(int c) {
        let capacity = c * 2;
        let maxLen = c;
        let size = 0;
        do initMapData();
        return this;
    }

    method void initMapData()  {
        var int i;
        let data = Array.new(capacity * 2);
        while (i < capacity) {
            let data[i * 2] = 0;
            let i = i + 1;
        }
        return;
    }

    method bool set(String key, int val) {
        var int hash, i;
        var String clonedKey, s;
        var bool t;

        if (size = maxLen) {
            return false;
        }

        let hash = hashStr(key);

        let t = true;
        while (t) {
            let s = data[hash * 2];
            if (i = 0) {
                let t = false;
            } else {
                if (StringTools.isEq(s, key)) {
                    let t = false;
                } else {
                    let hash = hash + 1;
                    let t = true;
                }
            }
        }

        let clonedKey = String.new(key.length());
        let i = 0;

        while (i < key.length()) {
            do clonedKey.appendChar(key.charAt(i));
            let i = i + 1;
        }

        let data[hash * 2] = clonedKey;
        let data[hash * 2 + 1] = val;
        let size = size + 1;
        return true;
    }

    method int get(String key) {
        var int hash, i;
        var String dataKey;

        let hash = hashStr(key);

        while (true) {
            let dataKey = data[hash * 2];

            if (dataKey = 0) {
                return null;
            }

            if (StringTools.isEq(dataKey, key)) {
                return data[hash * 2 + 1];
            }

            let hash = hash + 1;
        }

        return null;
    }

    method bool delete(String key) {
        var int hash, i;
        var bool t;
        var String dataKey;

        let hash = hashStr(key);

        while (true) {
            let dataKey = data[hash * 2];

            if (dataKey = 0) {
                return false;
            }

            if (StringTools.isEq(dataKey, key)) {
                let size = size - 1;
                let data[hash * 2] = 0;
                return true;
            }

            let hash = hash + 1;
        }

        return false;
    }

    method int hashStr(String key) {
        var int c, cursor, hash;
        let hash = 0;
        let cursor = 0;
        while (cursor < key.length()) {
            let c = key.charAt(cursor);
            let hash = ((hash * 32) - hash + c) | 0;
            let cursor = cursor + 1;
        }

        let c = hash / capacity;
        let hash = hash - (c * capacity);

        if (hash < 0) {
            return -hash;
        }

        return hash;
    } 
}