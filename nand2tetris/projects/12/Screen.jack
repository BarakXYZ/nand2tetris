// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int baseAddr;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let baseAddr = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int targetAddr, value, targetBit, i, accNum;

        // Find memory address of the word containing pixel (x,y)
        // Each row has 32 words (512 pixels รท 16),
        // so skip 32*y words, then add x/16 for word within row
        let targetAddr = (32 * y) + (x / 16) + baseAddr;

        let value = Memory.peek(targetAddr); // Fetch the curr screen value at addr

        // set the (x % 16)th bit of value to the current color.
        // Because we're working in groups of 16, we need to figure out which
        // bit position within the group to manipulate. So if the user wants 
        // to manipulate x=329, it'll be bit position 9 (329 % 16) 
        // within group 20 (329 / 16)
        let targetBit = 15 & x; // 0000 0000 0000 1111 & ABCD ABCD ABCD ABCD

        let i = 0;
        let accNum = 1;

        while (i < targetBit) {
            // Shift the bit to the target position: 1,2,4,8 | bit1,bit2,bit3,bit4
            let accNum = accNum + accNum;
            let i = i + 1;
        }
        if (color) {
            // OR operation (toggle ON)
            let value = value | accNum;
        } else {
            // AND operation (toggle OFF):
            // Flip all bits to 1 to preserve current state except target bit to
            // toggle OFF
            let accNum = -accNum;
            let value = value & accNum;
        }

        do Memory.poke(targetAddr, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;
        let x = x1;
        let y = y1;
        let dx = x2-x1;
        let dy = y2-y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        while (~(x > dx) & ~(b > dy)) {
            Screen.drawPixel(x+a, y+b);

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
