// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, internalMaxLength, numAsciiStart;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
            let length = 0;
            let internalMaxLength = maxLength;
            let numAsciiStart = 48;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (length > 0) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length) {
            return str[j];
        } else {
            // Throw an error?
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < (internalMaxLength - 1)) {
            let str[j] = c;
        } else {
            // Throw an error?
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < internalMaxLength) {
            let str[length] = c;
            let length = length + 1;
            return this;
        } else {
            // Throw an error?
        }
        return str;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let str[length] = 0; // is 0 correct here for essentially "null"?
        } else {
            // Throw an error?
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int c, index, sum, charAsNum;
        var boolean bWasDigitFound, bWasNoneZeroDigitFound, bIsNegative;

        let sum = 0;

        let bWasDigitFound = false;
        let bWasNoneZeroDigitFound = false;
        let bIsNegative = false;

        let index = 0;
        while(index < length) {
            let c = charAt(index);

            // Check if minus sign (i.e. '-')
            // Which is also considered the start of digits.
            if (c = 45) {
                if (bIsNegative) {
                    // Two negative signs were found, which is time to return.
                    return -sum;
                } else {
                    let bIsNegative = true;
                }
            }

            // Check if its a digit (0-9)
            if ((c > 47) & (c < 58)) {
                // Process digit
                let charAsNum = c - numAsciiStart; //  Convert to base 0-9

                // Handle leading zeros.
                if (~(bWasNoneZeroDigitFound) & (charAsNum = 0)) {
                    // Discard and skip trailing zeros.
                    let bWasDigitFound = true;
                } else {
                    // Handle numbers 1-9:
                    let bWasDigitFound = true;
                    let bWasNoneZeroDigitFound = true;

                    // Check if that's the first digit
                    if (sum = 0) {
                        let sum = charAsNum;
                    } else {
                        // Shift multiply by 10, and add the next digit.
                        let sum = (sum * 10) + charAsNum;
                    }
                }
            } else {
                // Return the sum if none-digit char was found after
                // Check if at least one digit was found.
                if (bWasNoneZeroDigitFound & bWasDigitFound) {
                    if (bIsNegative) {
                        return -sum;
                    } else {
                        return sum;
                    }
                }
                // else keep iterating until a digit is found, or str is exhausted
            }

            let index = index + 1;
        }
        if (bIsNegative) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int numOfDigits;
        var Array numArray;

        do String.clear(this);
        let numArray = Array.new(100);
        
        if (val = 0) {
            do appendChar(numAsciiStart);
            return;
        }

        if (val < 0) {
            let val = Math.abs(val);  // Work on the positive version
            do appendChar(45); // Prefix with minus (i.e. '-')
        }

        let numOfDigits = 0;

        while (val > 0) {
            let numArray[numOfDigits] = val - ((val / 10) * 10);
            let val = val / 10;
            let numOfDigits = numOfDigits + 1;
        }

        while (numOfDigits > 0) {
            do appendChar(numArray[numOfDigits-1] + numAsciiStart);
            let numOfDigits = numOfDigits - 1;
        }

        do numArray.dispose();
        return;
    }
    
    function void clear(String str) {
        var int length;
        let length = str.length();

        while (length > 0) {
            do str.eraseLastChar();
            let length = length - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
