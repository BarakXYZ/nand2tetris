// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    // Implemented by BarakXYZ 2024
    PARTS:

    DMux8Way(in=load, sel=address, 
    a=reg0, b=reg1, c=reg2, d=reg3, 
    e=reg4, f=reg5, g=reg6, h=reg7);

    Register(in=in, load=reg0, out=outReg0);
    Register(in=in, load=reg1, out=outReg1);
    Register(in=in, load=reg2, out=outReg2);
    Register(in=in, load=reg3, out=outReg3);
    Register(in=in, load=reg4, out=outReg4);
    Register(in=in, load=reg5, out=outReg5);
    Register(in=in, load=reg6, out=outReg6);
    Register(in=in, load=reg7, out=outReg7);

    Mux8Way16(
    a=outReg0, b=outReg1, c=outReg2, d=outReg3,
    e=outReg4, f=outReg5, g=outReg6, h=outReg7,
    sel=address, out=out);
}

/*
address = 3-bit address (000, 001 ... 111) -> which is log base 2 of n, in this case:
log base 2 of 8 registers = 3 (bits) -> 2..4..8

The main idea is to pass to the Dmux8Way the load (which will be 0 or 1) and the address of the register we want to give this load to (from).
Then, if load is 1, we're selecting a specific register via the address, putting the new 'in'put value into it (in case the load is actually set to 1), and outputting the register.
Finally, we can use a Mux8Way16 to output the register we want via its address.
*/
