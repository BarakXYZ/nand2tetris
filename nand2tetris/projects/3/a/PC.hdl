// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], inc, load, reset;
    OUT out[16];
    
    // Implemented by BarakXYZ 2024
    PARTS:

    // if inc, increment by 1 and out(t) + 1 (can be overriden by both load & reset)
    Inc16(in=lastIn, out=incLastIn);
    Mux16(a=lastIn, b=incLastIn, sel=inc, out=muxIncLastIn);

    // else if (load(t)), get new in
    Mux16(a=muxIncLastIn, b=in, sel=load, out=muxLoadNumber);

    // if reset, override and output 16 false bits (0's)
    Mux16(a=muxLoadNumber, b=false, sel=reset, out=muxReset);

    // If any of (inc, load, reset) are true -> load=1
    Or(a=inc, b=load, out=incOrLoad);
    Or(a=incOrLoad, b=reset, out=loadRegFin);
    Register(in=muxReset, load=loadRegFin, out=lastIn, out=out);
}
/*
There's an hierarchy of conditions that may override each other.
After building that hierarchy, we just need to check if any of the condition are true, 
since we have to load the new value in if any are true.
*/
