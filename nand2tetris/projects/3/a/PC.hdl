// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], inc, load, reset;
    OUT out[16];
    
    PARTS:
    Inc16(in=lastIn, out=incLastIn);  /** if 1, inc by 1 */
    Mux16(a=lastIn, b=incLastIn, sel=inc, out=muxIncLastIn);   /** 1.2, isInc? */
    Mux16(a=muxIncLastIn, b=in, sel=load, out=muxLoadNumber);  /** if 2, get new in */
    Mux16(a=muxLoadNumber, b=false, sel=reset, out=muxReset);  /** if 3, reset all */

    /** If any of (inc, load, reset) are true -> load=1 */
    Or(a=inc, b=load, out=orIncLoad);
    Or(a=orIncLoad, b=reset, out=loadRegFin);
    Register(in=muxReset, load=loadRegFin, out=lastIn, out=out);
}
/**
There's an hierarchy of condition that may override each other.
After building that hierarchy, we just need to check if any of the condition are true, since we have to load the new value in if any are true.

BarakXYZ 2024
*/
