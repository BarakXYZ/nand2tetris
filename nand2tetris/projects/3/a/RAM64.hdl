// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    // Implemented by BarakXYZ 2024
    PARTS:

    DMux8Way(in=load, sel=address[3..5],
    a=ram0, b=ram1, c=ram2, d=ram3,
    e=ram4, f=ram5, g=ram6, h=ram7);

    RAM8(in=in, load=ram0, address=address[0..2], out=outRam0);
    RAM8(in=in, load=ram1, address=address[0..2], out=outRam1);
    RAM8(in=in, load=ram2, address=address[0..2], out=outRam2);
    RAM8(in=in, load=ram3, address=address[0..2], out=outRam3);
    RAM8(in=in, load=ram4, address=address[0..2], out=outRam4);
    RAM8(in=in, load=ram5, address=address[0..2], out=outRam5);
    RAM8(in=in, load=ram6, address=address[0..2], out=outRam6);
    RAM8(in=in, load=ram7, address=address[0..2], out=outRam7);

    Mux8Way16(
    a=outRam0, b=outRam1, c=outRam2, d=outRam3,
    e=outRam4, f=outRam5, g=outRam6, h=outRam7,
    sel=address[3..5], out=out);

}

/*
address = 6-bit address (000000, 000001 ... 111111)
-> which is log base 2 of n, in this case:
log base 2 of 64 registers = 6 (bits) -> 2..4..8..16..32..64
                                         1..2..3...4...5...6

THIS IS SO COOL
It's actually magical and I'm still trying to wrap my head around this.
But yeah, I guess it make sense, we're selecting the specific RAM with the 3 most significent bits, then accessing the specific register with the 3 lsb.

BarakXYZ 2024
*/
