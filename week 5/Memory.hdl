// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    // Implemented by BarakXYZ 2024
    PARTS:

	// if (14-bit): in=loadScreen | else: in=loadRam
	DMux(in=load, sel=address[14], a=loadRam, b=loadScreen);

	RAM16K(in=in ,load=loadRam ,address=address[0..13] ,out=outRam);  // 14-bit address (0-16,383)

	Screen(in=in ,load=loadScreen ,address=address[0..12] ,out=outScreen);  // 13-bit address (0-8,191)

	Keyboard(out=outKeyboard);  // Simply outputs the current pressed key or 0 if none are pressed

	// Checking if 13-bit to store Screen or Keyboard (Screen will always have 0 at 13's bit, keyboard always will have 1)
	// Then checking if 14-bit (Ram will always have 0 at 14's, Screen or Keyboard will always have 1)
	Mux16(a=outScreen, b=outKeyboard, sel=address[13], out=outScreenOrKeyboard);
	Mux16(a=outRam, b=outScreenOrKeyboard, sel=address[14], out=out);
}

/* -----------------------------------------------------------------------
432109876543210
!!
011111111111111  == 16,383 (RAM)
100000000000000  == 16,384 (Screen)
110000000000000  == 24,576 (Keyboard)

Note:
The MSBits of those chips are the way to separate between them, but they will still
behave regularly in terms of their address space;
which means we still need to insert [0..12] to screen, and not [2..14]

BarakXYZ 2024 ---------------------------------------------------------  */
