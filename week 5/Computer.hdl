// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Computer.hdl
/**
 * The Hack computer, consisting of CPU, ROM and RAM.
 * When reset = 0, the program stored in the ROM executes.
 * When reset = 1, the program's execution restarts. 
 * Thus, to start running the currently loaded program,
 * set reset to 1, and then set it to 0. 
 * From this point onwards, the user is at the mercy of the software.
 * Depending on the program's code, and whether the code is correct,
 * the screen may show some output, the user may be expected to enter
 * some input using the keyboard, or the program may do some procerssing. 
 */
CHIP Computer {

    IN reset;

    // Implemented by BarakXYZ 2024
    // Happily connecting the dots <3:
    PARTS:

        // ROM32K:

        // address     = PC will emitt the next instruction to fetch
        // out         = ROM will emitt the instruction itelf to the CPU

        ROM32K(address=outPC ,out=outROM);
        
        /* -------------------------------------------------------- */

        // CPU:

        // inM         = the Data Memory to work on
        // instruction = Current ROM instruction to execute
        // reset       = Start or Restart a program (determined by the user)
        // outM        = Processed inM, sent to the Memory
        // writeM      = Determines if we should write the new memory sent ^
        // addressM    = Accessing the memory at a specific location, fetching, reading, etc.
        // pc          = Next Program Instruction to execute, sent to the ROM32K

        CPU(inM=outMemory, instruction=outROM ,reset=reset ,outM=cpuOutM ,writeM=cpuWriteM ,addressM=cpuAddressM ,pc=outPC);

        /* -------------------------------------------------------- */

        // Memory:

        // in          = Processed data, incoming from the CPU
        // load        = Should we write this new processed data?
        // address     = Data to fetch, later sent to the CPU
        // out         = Data to send to the CPU

        Memory(in=cpuOutM ,load=cpuWriteM ,address=cpuAddressM ,out=outMemory);
}
/* -------------------------------------------------------------------------------------------

API: https://www.ic.unicamp.br/~rodolfo/mc404/HDL_Survival_Guida-Nand2tetris.pdf   // Page 3-4

BarakXYZ 2024 ----------------------------------------------------------------------------- */
