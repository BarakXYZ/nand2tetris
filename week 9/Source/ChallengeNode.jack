//** Written & Designed by BarakXYZ (Barak Arosh Surian) in 2024
// As part of Week 9 assignment @NAND2TETRIS by Shimon Shocken & Noam Nisan *//

//** Construction and implementations of all the different Challenge Nodes NPC's carry. Is also Responsible for drawing the nodes in the correct location (i.e. Rows and Columns). Challenge Nodes will be initialized, disposed and updated during gameplay, upon quest completion, etc. *//
//** All Challenges solutions and actual Assembly code can be found at the solutions 'Assembly Solutions' folder *//
class ChallengeNode {

    field int currentRow, numLines, queries;
    field String t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    field String a0, a1, a2, a3;
    field String r0, r1, r2, r3;
    field Array content, answers, registers;
    field boolean isCompleted, isEnemy;

    static int startRowCode, startCol, startRowReg, numOfRegs; 
    static String lineIndex;

    function void init() {
        let startRowCode = 4;
        let startCol = 3;
        let startRowReg = 16;
        let lineIndex = String.new(3);
        let numOfRegs = 4;
        return;
    }

    method void draw() {
        
        // do UserInterface.clearChallengeCode();  // Ok something 
        // do UserInterface.clearChallengeAnswer();  // here is wrong

        while (~(currentRow = numLines)) {
            do UserInterface.clearDialogueBox();
            do ChallengeNode.drawLineIndex(currentRow);

            do Output.moveCursor(startRowCode + currentRow, startCol);
            do Output.printString(content[currentRow]);

            let currentRow = currentRow + 1;
        }
        let currentRow = 0;

        do drawRegisters();
        if(QuestManager.getActive() > 0) { do UserInterface.drawChallengeFrame(); }
        return;
    }

    method void drawRegisters() {
        var int i;
        let i = 0;

        while (i < numOfRegs) {
            do Output.moveCursor(startRowReg + i, 1);
            do Output.printString(registers[i]);
            let i = i + 1;
        }
        return;
    }


    function void drawLineIndex(int aCurrentRow) {
        if (~(aCurrentRow > 9)) {
            do Output.moveCursor(startRowCode + aCurrentRow, startCol - 2);
        }
        else {
            do Output.moveCursor(startRowCode + aCurrentRow, startCol - 3);
        }

        let lineIndex = String.new(4);
        do lineIndex.setInt(aCurrentRow);
        do lineIndex.appendChar(46);
        do Output.printString(lineIndex);
        do lineIndex.dispose();
        
        return;
    }

    method void assignContentToArr() {
        
        let currentRow = 0;
        let content = Array.new(12);

        let content[0] = t0;
        let content[1] = t1;
        let content[2] = t2;
        let content[3] = t3;

        let content[4] = t4;
        let content[5] = t5;
        let content[6] = t6;
        let content[7] = t7;

        let content[8] = t8;
        let content[9] = t9;
        let content[10] = t10;
        let content[11] = t11;

        let answers = Array.new(numOfRegs);
        let answers[0] = a0;
        let answers[1] = a1;
        let answers[2] = a2;
        let answers[3] = a3;

        let registers = Array.new(numOfRegs);
        let registers[0] = r0;
        let registers[1] = r1;
        let registers[2] = r2;
        let registers[3] = r3;

        return;
    }

    method boolean checkAnswer(String b12, String b13, String b14, String b15) {
        if (queries = 1) { return Helpers.strComp(b12, a0); }
        if (queries = 2) {
            return Helpers.strComp(b12, a0) & Helpers.strComp(b13, a1);
        }
        if (queries = 3) {
            return Helpers.strComp(b12, a0) & Helpers.strComp(b13, a1) & Helpers.strComp(b14, a2);
        }
        if (queries = 4) {
            return Helpers.strComp(b12, a0) & Helpers.strComp(b13, a1) & Helpers.strComp(b14, a2) & Helpers.strComp(b15, a3);
        }
        return false;
    }

    method boolean isEnemy() {
        return isEnemy;
    }
    
    method boolean isCompleted() {
        return isCompleted;
    }

    method void complete() {
        let isCompleted = true;
        return;
    }

    method void dispose() {

        do lineIndex.dispose();

        //** Dispose all Strings *//
        do t0.dispose();
        do t1.dispose();
        do t2.dispose();
        do t3.dispose();
        do t4.dispose();
        do t5.dispose();
        do t6.dispose();
        do t7.dispose();
        do t8.dispose();
        do t9.dispose();
        do t10.dispose();
        do t11.dispose();

        do a0.dispose();
        do a1.dispose();
        do a2.dispose();
        do a3.dispose();

        do r0.dispose();
        do r1.dispose();
        do r2.dispose();
        do r3.dispose();

        //** Dispose Array *//
        do content.dispose();
        do answers.dispose();
        do registers.dispose();

        //** Dispose Object *//
        do Memory.deAlloc(this);
        return;
    }

    //** NODES *//

    constructor ChallengeNode makeBlank() {

        let numLines = 0;
        let queries = 0;

        let t0 = " ";
        let t1 = " ";
        let t2 = " ";
        let t3 = " ";
        let t4 = " ";
        let t5 = " ";
        let t6 = " ";
        let t7 = " ";
        let t8 = " ";
        let t9 = " ";
        let t10 = " ";
        let t11 = " ";

        let a0 = " ";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = " ";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = false;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }

    constructor ChallengeNode makeChallenge1() {

        let numLines = 4;
        let queries = 1;

        let t0 = "@42";
        let t1 = "D=A";
        let t2 = "@555";
        let t3 = "M=D";
        let t4 = " ";
        let t5 = " ";
        let t6 = " ";
        let t7 = " ";
        let t8 = " ";
        let t9 = " ";
        let t10 = " ";
        let t11 = " ";

        let a0 = "42";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[555]=";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = false;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }

    constructor ChallengeNode makeChallenge2() {

        let numLines = 6;
        let queries = 2;

        let t0 = "@SHIMON";
        let t1 = "D=M";
        let t2 = "D=D+A";
        let t3 = "@40";
        let t4 = "A=D-A";
        let t5 = "M=D-1";
        let t6 = " ";
        let t7 = " ";
        let t8 = " ";
        let t9 = " ";
        let t10 = " ";
        let t11 = " ";
        
        let a0 = "42";
        let a1 = "596";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[555]=";
        let r1 = "RAM[557]=";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = false;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }

    constructor ChallengeNode makeChallenge3() {

        let numLines = 4;
        let queries = 1;

        let t0 = "@357";
        let t1 = "D=M";
        let t2 = "@666";
        let t3 = "M=A+D";
        let t4 = " ";
        let t5 = " ";
        let t6 = " ";
        let t7 = " ";
        let t8 = " ";
        let t9 = " ";
        let t10 = " ";
        let t11 = " ";
        
        let a0 = "684";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[666]=";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = false;
        let isCompleted = false;  // not really being used

        do assignContentToArr();

        return this;
    }

    constructor ChallengeNode makeChallengeGNIRUT() {
        
        let numLines = 11;
        let queries = 1;

        let t0 = "@5";
        let t1 = "D=A";
        let t2 = "D=D+M";
        let t3 = "A=D-A";
        let t4 = "D=D+1";
        let t5 = "D=D-M";
        let t6 = "A=D-A";
        let t7 = "D=M+D";
        let t8 = "D=A+D";
        let t9 = "@357";
        let t10 = "M=D";
        let t11 = " ";
        
        let a0 = "18";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[357]=";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = true;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }


    constructor ChallengeNode makeChallenge4() {
        
        let numLines = 11;
        let queries = 1;

        let t0 = "@LOLO";
        let t1 = "D=M";
        let t2 = "@GNIRUT";
        let t3 = "D=D-M";
        let t4 = "(FROGGY)";
        let t5 = "@SHIMON";
        let t6 = "D=M-D";
        let t7 = "@FROGGY";
        let t8 = "D+1;JGE";
        let t9 = "@201";
        let t10 = "M=A-D";
        let t11 = " ";
        
        let a0 = "219";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[201]=";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = false;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }


    constructor ChallengeNode makeChallengeLOLO() {
        
        let numLines = 10;
        let queries = 1;

        let t0 = "@LOLO";
        let t1 = "D=A+1";
        let t2 = "@LOLI";
        let t3 = "M=D-1";
        let t4 = "(LOLI)";
        let t5 = "MD=M-D";
        let t6 = "@LOLI";
        let t7 = "D+1;JEQ";
        let t8 = "@LOLO";
        let t9 = "M=D";
        let t10 = " ";
        let t11 = " ";
        
        let a0 = "0";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[1010]=";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = true;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }

    constructor ChallengeNode makeChallenge5() {
        
        let numLines = 11;
        let queries = 4;

        let t0 = "@NAND";
        let t1 = "D=M";
        let t2 = "@2";
        let t3 = "MD=D+A";
        let t4 = "@TETRIS";
        let t5 = "D=D-M";
        let t6 = "@WEEK9";
        let t7 = "M=!D";
        let t8 = "@You";
        let t9 = "@Got";
        let t10 = "@This!";
        let t11 = " ";
        
        let a0 = "-1";
        let a1 = "1";
        let a2 = "-476";
        let a3 = "-478";

        let r0 = "RAM[NAND]=";
        let r1 = "RAM[2]=";
        let r2 = "R[TETRIS]=";
        let r3 = "R[WEEK9]=";

        let isEnemy = false;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }


    constructor ChallengeNode makeChallengeNAND() {
        
        let numLines = 10;
        let queries = 1;

        let t0 = "@5";
        let t1 = "D=A";
        let t2 = "(NAN!)";
        let t3 = "@10";
        let t4 = "D=D&A";
        let t5 = "MD=!D";
        let t6 = "@NAN!";
        let t7 = "D+1;JGE";
        let t8 = "@10";
        let t9 = "M=D|A";
        let t10 = " ";
        let t11 = " ";
        
        let a0 = "-1";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = "RAM[10]=";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = true;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }

    constructor ChallengeNode makeChallengeTETRIS() {
        
        let numLines = 11;
        let queries = 4;

        let t0 = "@101";
        let t1 = "D=A";
        let t2 = "AD=D|M";
        let t3 = "A=M|D";
        let t4 = "AM=M+D";
        let t5 = "AD=M|D";
        let t6 = "AMD=D-M";
        let t7 = "A=D&M";
        let t8 = "AMD=D|M";
        let t9 = "A=D-M";
        let t10 = "M=!A";
        let t11 = " ";
        
        let a0 = "555";
        let a1 = "357";
        let a2 = "487";
        let a3 = "-476";

        let r0 = "RAM[375]=";
        let r1 = "RAM[367]=";
        let r2 = "RAM[0]=";
        let r3 = "RAM[475]=";

        let isEnemy = true;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }

    
    constructor ChallengeNode makeChallengeEnd() {
        
        let numLines = 9;
        let queries = 1;

        let t0 = "@MAZAL";
        let t1 = "@TOV";
        let t2 = "@YOU";
        let t3 = "@DID";
        let t4 = "@IT!";
        let t5 = "@100";
        let t6 = "D=A";
        let t7 = "@YOU";
        let t8 = "M=D";
        let t9 = " ";
        let t10 = " ";
        let t11 = " ";
        
        let a0 = "12345";
        let a1 = " ";
        let a2 = " ";
        let a3 = " ";

        let r0 = " ";
        let r1 = " ";
        let r2 = " ";
        let r3 = " ";

        let isEnemy = false;
        let isCompleted = false;

        do assignContentToArr();

        return this;
    }
}
