// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/DMux4Way.hdl
/**
 * 4-way demultiplexor:
 * [a, b, c, d] = [in, 0, 0, 0] if sel = 00
 *                [0, in, 0, 0] if sel = 01
 *                [0, 0, in, 0] if sel = 10
 *                [0, 0, 0, in] if sel = 11
 */
CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;
    
    // Implemented by BarakXYZ 2024
    // v2
    PARTS:
    DMux(in=in, sel=sel[1], a=AB, b=CD);  // Split to 2 halves by the MSB
    DMux(in=AB, sel=sel[0], a=a, b=b);    // Final routing by the LSB
    DMux(in=CD, sel=sel[0], a=c, b=d);
}

/*
    * Implementation v2:
    After digesting these concepts a bit further, it's easy to simplify the implementation:
    Firstly filtering via the second bit to 2 halves.
    Then filtering via the first bit to the final result.

    * Implementation v1 *
    Or(a=sel[0], b=sel[1], out=OrAB);
    Not(in=OrAB, out=NotOrAB);
    And(a=in, b=NotOrAB, out=a);
    
    And(a=sel[0], b=sel[1], out=AndCD);
    And(a=in, b=AndCD, out=d);
    
    Not(in=sel[1], out=NotSel1);
    And(a=sel[0], b=NotSel1, out=AndSel0NotSel1);
    And(a=in, b=AndSel0NotSel1, out=b);

    Not(in=sel[0], out=NotSel0);
    And(a=sel[1], b=NotSel0, out=AndSel1NotSel0);
    And(a=in, b=AndSel1NotSel0, out=c);

*/
