// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/DMux.hdl
/**
 * Demultiplexor:
 * [a, b] = [in, 0] if sel = 0
 *          [0, in] if sel = 1
 */
CHIP DMux {
    IN in, sel;
    OUT a, b;

    // Implemented by BarakXYZ 2024
    PARTS:
    Not(in=sel, out=notSel);
    And(a=in, b=notSel, out=a);  // [in, 0] if sel=0
    And(a=in, b=sel, out=b);     // [0, in] if sel=1
}

/*
In the case of sel=0 (passing 'in' to 'a', which can be either 0 or 1, and always 0 to b) so we'll:
    1. Negate sel, to give 'in' the option to decide if the final output should be 0 or 1.
    2. Pass 'in' to 'a' (a=in), which can be either 0 or 1, and then output the result to 'a' (out=a).

Same story for 'b', but because we pass 1 to select it, we just don't need to negate.

~p.s. that was probably one of the hardest chips (assignments) to implement somehow, lol :)(@)
*/
